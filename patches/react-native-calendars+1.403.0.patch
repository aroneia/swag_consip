diff --git a/node_modules/react-native-calendars/.eslintrc.js b/node_modules/react-native-calendars/.eslintrc.js
new file mode 100644
index 0000000..d5b443f
--- /dev/null
+++ b/node_modules/react-native-calendars/.eslintrc.js
@@ -0,0 +1,29 @@
+module.exports = {
+  env: {
+    es6: true,
+    node: true,
+  },
+  globals: {
+    expect: true,
+    it: true,
+    describe: true,
+  },
+  extends: ['eslint:recommended'],
+  parser: 'babel-eslint',
+  parserOptions: {
+    ecmaFeatures: {
+      experimentalObjectRestSpread: true,
+      jsx: true,
+    },
+    sourceType: 'module',
+  },
+  plugins: ['react'],
+  rules: {
+    'linebreak-style': ['error', 'unix'],
+    'no-unused-vars': 2,
+    'object-curly-spacing': ['error', 'never'],
+    semi: ['error', 'always'],
+    'react/jsx-uses-react': 2,
+    'react/jsx-uses-vars': 2,
+  },
+};
diff --git a/node_modules/react-native-calendars/.github/stale.yml b/node_modules/react-native-calendars/.github/stale.yml
new file mode 100644
index 0000000..326b65f
--- /dev/null
+++ b/node_modules/react-native-calendars/.github/stale.yml
@@ -0,0 +1,18 @@
+# Number of days of inactivity before an issue becomes stale
+daysUntilStale: 90
+# Number of days of inactivity before a stale issue is closed
+daysUntilClose: 30
+# Issues with these labels will never be considered stale
+exemptLabels:
+  - Bug report
+  - Feature request
+  - merge-candidate
+# Label to use when marking an issue as stale
+staleLabel: stale
+# Comment to post when marking an issue as stale. Set to `false` to disable
+markComment: >
+  This issue has been automatically marked as stale because it has not had
+  recent activity. It will be closed if no further activity occurs. Thank you
+  for your contributions.
+# Comment to post when closing a stale issue. Set to `false` to disable
+closeComment: false
diff --git a/node_modules/react-native-calendars/.nvmrc b/node_modules/react-native-calendars/.nvmrc
new file mode 100644
index 0000000..dfd39f4
--- /dev/null
+++ b/node_modules/react-native-calendars/.nvmrc
@@ -0,0 +1 @@
+12.17.0
diff --git a/node_modules/react-native-calendars/.prettierignore b/node_modules/react-native-calendars/.prettierignore
new file mode 100644
index 0000000..eeba837
--- /dev/null
+++ b/node_modules/react-native-calendars/.prettierignore
@@ -0,0 +1,5 @@
+build
+node_modules
+ios
+android
+package-lock.json
\ No newline at end of file
diff --git a/node_modules/react-native-calendars/.prettierrc.json b/node_modules/react-native-calendars/.prettierrc.json
new file mode 100644
index 0000000..f551641
--- /dev/null
+++ b/node_modules/react-native-calendars/.prettierrc.json
@@ -0,0 +1,7 @@
+{
+  "singleQuote": true,
+  "printWidth": 120,
+  "bracketSpacing": false,
+  "arrowParens": "always",
+  "trailingComma": "all"
+}
diff --git a/node_modules/react-native-calendars/CHANGELOG.md b/node_modules/react-native-calendars/CHANGELOG.md
index 61d7821..8a6058f 100644
--- a/node_modules/react-native-calendars/CHANGELOG.md
+++ b/node_modules/react-native-calendars/CHANGELOG.md
@@ -1,674 +1,375 @@
 # Changelog
 
-## [1.188.0] - 2019-6-16
-
+## [1.188.0] - 2019-06-16
 ### Added
-
-- AgendaList - invoking used SectionList's events.
-
+- src/expandableCalendar/AgendaList.js - invoking used SectionList's events.
 ### Removed
+- example/src/screens/ExpandableCalendar.js - removing unnecessary 'data' prop sent to AgendaList.
 
-- ExpandableCalendar screen - removing unnecessary 'data' prop sent to AgendaList.
-
-## [1.189.0] - 2019-6-24
 
+## [1.189.0] - 2019-06-24
 ### Bug Fix
-
 - CalendarProvider - fix for 'date' prop update.
 
-## [1.190.0] - 2019-6-24
-
+## [1.190.0] - 2019-06-24
 ### Added
-
 - CalendarContext - 'disabledOpacity' prop to control the opacity of the today button when it is disabled (default is now undefined, meaning no opacity).
 - src/style.js - adding support for today button's font size, weight, family.
-
 ### Bug Fix
-
 - CalendarContext - fix for today button's width to allow button to take content's width.
 
-## [1.191.0] - 2019-6-24
-
+## [1.191.0] - 2019-06-24
 ### Bug Fix
-
 - ExpandableCalendar - limit calendar min height to closed height.
 
-## [1.192.0] - 2019-6-25
-
+## [1.192.0] - 2019-06-25
 ### Fix
-
 - CalendarProvider - fix for warning on Image 'source' type.
 - ExpandableCalendar - fix shadow/elevation style.
 
-## [1.193.0] - 2019-6-26
-
+## [1.193.0] - 2019-06-26
 ### Bug Fix
-
 - ExpandableCalendar - fix for week paddings. Changing knob container height and weekDays style.
 - CalendarList/item - limit 'headerStyle' to horizontal only.
 
-## [1.194.0] - 2019-6-30
-
+## [1.194.0] - 2019-06-30
 ### Added
-
 - CalendarProvider - 'onMonthChange' event returning date object and updateSource.
 
-## [1.195.0] - 2019-7-04
-
+## [1.195.0] - 2019-07-04
 ### Changed
-
 - Components' props comment format.
 
-## [1.196.0] - 2019-7-04
-
+## [1.196.0] - 2019-07-04
 ### Added
-
 - CalendarList - passing 'testID' to static CalendarHeader.
 
-## [1.197.0] - 2019-7-14
-
+## [1.197.0] - 2019-07-14
 ### Added
-
 - asCalendarConsumer - hoist non-react statics.
 
-## [1.198.0] - 2019-7-14
-
+## [1.198.0] - 2019-07-14
 ### Fix
-
 - ExpandableCalendar - fix example screen.
 
-## [1.199.0] - 2019-7-18
-
+## [1.199.0] - 2019-07-18
 ### Changed
-
 - CalendarHeader - editing 'testID' for static CalendarHeader.
 
-## [1.200.0] - 2019-7-18
-
+## [1.200.0] - 2019-07-18
 ### Added
-
 - ExpandableCalendar - adding 'testID' for knob.
 
-## [1.201.0] - 2019-7-25
-
+## [1.201.0] - 2019-07-25
 ### Changed
-
 - eslint - updating to version 6.1.0.
 - lodash - importing library instead of sub-libraries.
 
-## [1.202.0] - 2019-7-25
-
+## [1.202.0] - 2019-07-25
 ### Added
-
 - CalendarHeader - adding 'firstDay' (PR #826), 'monthFormat' (PR #787) and 'weekNumbers' to shouldComponentUpdate.
 - Agenda - adding support for weekdays name's 'fontSize', 'fontFamily' and 'fontWeight' (PR #711).
 - ReservationList - adding support for Day number's 'fontFamily', and to Day text's 'fontFamily' and 'fontWeight' (PR #711).
 
-## [1.203.0] - 2019-7-31
-
+## [1.203.0] - 2019-07-31
 ### Fix
-
 - ExpandableCalendar - fix for vertical open height.
 
-## [1.204.0] - 2019-8-6
-
+## [1.204.0] - 2019-08-6
 ### Fix
-
 - CalendarProvider - adding 'buttonTopPosition' prop to control the button's y position.
 
-## [1.205.0] - 2019-8-15
-
+## [1.205.0] - 2019-08-15
 ### Fix
-
 - Week - fix for style - removing width to allow flex.
 
-## [1.206.0] - 2019-8-15
-
+## [1.206.0] - 2019-08-15
 ### Fix
-
 - CalendarProvider - fix header in vertical mode when initial position is 'open'.
 
-## [1.207.0] - 2019-8-15
-
+## [1.207.0] - 2019-08-15
 ### Added
-
 - CalendarProvider - 'todayButtonStyle' prop to allow passing style to the today button.
 
-## [1.208.0] - 2019-8-15
-
+## [1.208.0] - 2019-08-15
 ### Added
-
 - CalendarProvider - today button size for tablet. 
-  Passing style prop to a container View.
+    Passing style prop to a container View.
 - ExpandableCalendar - adjusting vertical mode open height for tablet in both orientations.
 
-## [1.209.0] - 2019-8-20
-
+## [1.209.0] - 2019-08-20
 ### Fix
-
 - CalendarProvider - fix for children wrapper view.
 
 ## [1.213.0] - 2019-11-13
-
 ### Changed
-
 - Upgrading react-native to version 61.4.0.
 
 ## [1.214.0] - 2019-12-12
-
 ### Fix
-
 - Agenda - fix typo on 'scrollEnable' prop.
 - ExpandableCalendar - fix passed props to CalendarList.
 
 ## [1.215.0] - 2019-12-23
-
 ### Added
-
 - ExpandableCalendar - adding week scroll to closed position.
 
 ## [1.216.0] - 2019-12-24
-
 ### Fix
-
 - Week - moving width style to style file.
 
 ## [1.217.0] - 2019-12-24
-
 ### Fix
-
 - Week - moving width style to WeekCalendar.
 
 ## [1.218.0] - 2020-1-12
-
 ### Added
-
 - AgendaList - allow text transform override for section header text.
 
 ## [1.221.0] - 2020-1-16
-
 ### Bug Fix 
-
 - ExpandableCalendar - fix 'renderArrow' (PR #1037).
 
 ## [1.223.0] - 2020-1-16
-
 ### Added
-
 - WeekCalendar - new component.
 
 ## [1.224.0] - 2020-1-16
-
 ### Added
-
 - AgendaList - allow passing 'keyExtractor'.
 
 ## [1.225.0] - 2020-1-19
-
 ### Bug Fix
-
 - package.json - adding 'hoist-non-react-statics' dependency (fix issue #900).
 
 ## [1.226.0] - 2020-1-19
-
 ### Added
-
-- Life cycle methods - renaming with UNSAFE\_ prefix 'componentWillMount()' and 'componentWillReceiveProps()'.
+- Life cycle methods - renaming with UNSAFE_ prefix 'componentWillMount()' and 'componentWillReceiveProps()'.
 
 ## [1.227.0] - 2020-1-19
-
 ### Added
-
 - AgendaList - allow passing 'stickySectionHeadersEnabled' (PR #1004).
 
 ## [1.228.0] - 2020-1-19
-
 ### Bug Fix
-
 - Day custom - fix for 'selectedDayTextColor' not working (PR #995).
 
 ## [1.229.0] - 2020-1-19
-
 ### Added
-
 - Calendar - adding ref to CalendarHeader (PR #986).
 
 ## [1.230.0] - 2020-1-19
-
 ### Fix
-
 - Agenda - fix for calendar offset (PR #953).
 
 ## [1.231.0] - 2020-1-19
-
 ### Change
-
 - Agenda - use 'initialScrollPadPosition()' (PR #948).
 
 ## [1.232.0] - 2020-1-19
-
 ### Bug Fix
-
 - Day components - fix for 'disableTouchEvent' marking to disable interactions for all marking types.
 
 ## [1.233.0] = 2020-1-19
-
 ### Added
-
 - Calendar - update when 'displayLoadingIndicator' changes (PR #939).
 
 ## [1.234.0] - 2020-1-19
-
 ### Fix
-
 - Calendar and README - typo (PR #).
 
 ## [1.235.0] - 2020-1-19
-
 ### Fix
-
 - README - typo (Pr #912).
 
 ## [1.236.0] - 2020-1-20
-
 ### Changed
-
 - Agenda - 'scrollEventThrottle' from 1 to 8 (Pr #908).
 
 ## [1.237.0] - 2020-1-20
-
 ### Added
-
 - CalendarHeader - re-render when 'renderArrow' changes (PR #907).
 
 ## [1.238.0] - 2020-1-20
-
 ### Added
-
 - CalendarList - pass 'onEndReached' and 'onEndReachedThreshold' to FlatList (PR #893).
 
 ## [1.239.0] - 2020-1-20
-
 ### Added
-
 - CalendarList - pass 'keyExtractor' (PR #883).
 
 ## [1.240.0] - 2020-1-20
-
 ### Added
-
 - Day - adding 'onLongPress' support to type multi-period.
 
 ## [1.241.0] - 2020-1-20
-
 ### Fix
-
 - README - add 'disabledByDefault' prop (Pr #774).
 
 ## [1.242.0] - 2020-1-20
-
 ### Added
-
 - Agenda - invoking 'onVisibleMonthsChange()' directly (PR #746).
 
 ## [1.243.0] - 2020-1-20
-
 ### Added
-
 - Calendar - adding 'disableArrowLeft' and 'disableArrowRight' (PR #530).
 
 ## [1.244.0] - 2020-1-20
-
 ### Added
-
 - Agenda - allow showing extra days (by passing hideExtraDays={false}).
 
 ### Changed
-
 - Calendars screen - remove redundant prop.
 
 ## [1.245.0] - 2020-1-21
-
 ### Changed
-
 - README - editing.
 
 ## [1.246.0] - 2020-1-21
-
 ### Changed
-
 - Example - refresh demo app style.
 
 ## [1.247.0] - 2020-1-22
-
 ### Added
-
 - iOS - app icon.
 
 ## [1.248.0] - 2020-1-22
-
 ### Changed
-
 - iOS - demo app name.
 
 ## [1.249.0] - 2020-1-22
-
 ### Added
-
 - CalendarList - passing 'keyboardShouldPersistTaps' to FlatList.
 
 ## [1.250.0] - 2020-1-22
-
 ### Added
-
 - Agenda - passing 'testId' to knob.
 
 ## [1.251.0] - 2020-1-22
-
 ### Bug Fix
-
 - CalendarList - 'keyboardShouldPersistTaps' PropTypes.
 
 ## [1.252.0] - 2020-1-22
-
 ### Changed
-
 - Agenda - Animated.ScrollView invoke 'scrollTo' using ref.getNode() for RN62 compatibility (PR #1040).
 
 ## [1.253.0] - 2020-1-23
-
 ### Added
-
 - CalendarHeader - 'aria-level' for web accessability support (PR #792).
 
 ## [1.254.0] - 2020-1-23
-
 ### Added
-
 - ExpandableCalendar - default value to height style to avoid NaN value (PR #1044).
 
 ## [1.255.0] - 2020-1-23
-
 ### Added
-
 - .eslintrc - new roles.
 - src files - fix lint errors.
 
 ## [1.256.0] - 2020-1-23
-
 ### Fix
-
 - README - fix examples.
 
 ## [1.257.0] - 2020-1-23
-
 ### Bug fix
-
 - Reservation - secure calls to prop functions to avoid crashes.
 
 ## [1.258.0] - 2020-1-25
-
 ### Fix
-
 - file cosmetics.
 
 ## [1.259.0] - 2020-1-25
-
 ### Added
-
 - Android - app icon and demo app name.
 
 ## [1.260.0] - 2020-2-3
-
 ### Fix
-
 - Fix app icon.
 
 ## [1.261.0] - 2020-2-5
-
 ### Added
-
 - Calendar - adding accessibility features.
 
 ## [1.262.0] - 2020-2-18
-
 ### Added
-
 - Agenda - adding scroll events callbacks (PR #1063).
 
 ## [1.263.0] - 2020-2-18
-
 ### Added
-
 - Calendar - passing testID to header (PR #1058).
 
 ## [1.264.0] - 2020-3-3
-
 ### Bug fix
-
 - CalendarListItem - fix previous months bug (PR #1069).
 
 ## [1.265.0] - 2020-3-12
-
 ### Added
-
 - Setup Detox for e2e tests (iOS).
 
-## [1.282.0] - 2020-6-4
-
+## [1.282.0] - 2020-6-04
 ### New Feature
-
-- Calendar - enable swipe.
+- Calendar - Enable swipe.
 
 ## [1.291.0] - 2020-6-10
-
 ### New Feature
-
-- Calendar - render custom header.
+- Calendar - Render custom header.
 
 ## [1.292.0] - 2020-6-10
-
 ### New Feature
-
-- Calendar - show should show six weeks by passing 'showSixWeeks'.
+- Calendar - Show should show six weeks by passing 'showSixWeeks'.
 
 ## [1.297.0] - 2020-6-17
-
 ### Bug fix
-
 - Calendar isn't getting re-rendered if the first day prop is changed.
 
 ## [1.298.0] - 2020-6-17
-
 ### New Feature
-
-- Calendar - control the swipe with new 'enableSwipeMonths' prop.
+- Calendar - Control the swipe with new 'enableSwipeMonths' prop.
 
 ## [1.299.0] - 2020-8-5
-
 ### Fix
-
 - Android RNN version and configuration (PR #1251).
 
 ## [1.300.0] - 2020-8-5
-
 ### Fix
-
 - ExpandableCalendar and AgendaList RTL style.
 
 ## [1.309.0] - 2020-8-12
-
 ### Fix
-
-- AgendaList - check 'dayFormat' prop before passing to XDate.toString().
+- AgendaList - Check 'dayFormat' prop before passing to XDate.toString().
 
 ## [1.310.0] - 2020-8-13
-
 ### Fix
-
-- Calendar - remove default gesture wrapper (PR #1248).
+- Calendar - Remove default gesture wrapper (PR #1248).
 
 ## [1.311.0] - 2020-8-13
-
 ### Fix
-
 - Fix E2E tests (PR #1255).
 
 ## [1.312.0] - 2020-8-13
-
 ### Added
-
 - Test E2E on CI (PR #1264).
 
 ## [1.313.0] - 2020-8-16
-
 ### Added
-
 - Prettier (PR #1265).
 
 ## [1.314.0] - 2020-8-16
-
 ### Fix
-
 - Fix iOS example bundle identifier.
 - ExpandableCalendar style - using I18nManager from common constants.
-
 ### Added
-
 - Updating CHANGELOG.
 - Configuring github stale bot.
 
 ## [1.315.0] - 2020-8-23
-
 ### Added
-
 - AgendaList - adding 'useMoment' to allow using moment.js for section header's date string formatting.
 
 ## [1.316.0] - 2020-8-27
-
 ### Fix
+- Calendar Header - Fixed issue on react-native-web where the calendar arrows were not appearing (PR #934).
 
-- Calendar Header - fix issue on 'react-native-web' where the calendar arrows were not appearing (PR #934).
-
-## [1.334.0] - 2020-8-29
-
+## [1.317.0] - 2020-8-29
 ### Fix
-
 - Calendar Header style - fix for arrows not showing in mobile due to PR #934.
-
-## [1.340.0] - 2020-8-30
-
-### Fix
-
-- README - edit (PR #1219).
-
-## [1.344.0] - 2020-9-3
-
-### Added
-
-- Calendar - adding 'customHeader' prop (PR #1225).
-
-## [1.404.0] - 2020-11-24
-
-- Moving inline styles to StyleSheets.
-
-## [1.406.0] - 2020-11-24
-
-- Unify library code - this.styles to this.style.
-
-## [1.407.0] - 2020-11-26
-
-### Fix
-
-- Calendar - fix for 'disableArrowLeft', 'disableArrowRight' update (PR #1309).
-
-## [1.490.0] - 2020-11-29
-
-### Added
-
-- AgendaList - allow passing 'renderSectionHeader' prop (PR #1306).
-
-## [1.491.0] - 2020-11-29
-
-### Added
-
-- Agenda - add 'showOnlySelectedDayItems' prop (PR #1317).
-
-## [1.492.0] - 2020-11-29
-
-### Fix
-
-- example - fix formatting.
-
-## [1.493.0] - 2020-11-29
-
-### Fix
-
-- CalendarList - Forwarding missing 'disabledDaysIndexes' prop from CalendarListItem to Calendar (PR #1323).
-
-## [1.494.0] - 2020-11-29
-
-- Code cleanup.
-
-## [1.494.0] - 2020-11-29
-
-### Added
-
-- why-did-you-render setup.
-
-## [1.495.0] - 2020-12-01
-
-- Edit README.
-
-## [1.496.0] - 2020-12-02
-
-- AgendaList, ExpandableCalendar, WeekCalendar - adding a note to wrap with CalendarProvider.
-
-## [1.497.0] - 2020-12-02
-
-### Fix
-
-- Day multi-period - Fix day text align on multi-period (PR #1344).
-
-## [1.498.0] - 2020-12-02
-
-### Added
-
-- ExpandableCalendar - added 'onCalendarToggled' prop (PR #1334).
-
-## [1.499.0] - 2020-12-02
-
-### Added
-
-- Detox configuration - run on iOS 13.7 simulator to fix CI builds.
-
-## [1.500.0] - 2020-12-02
-
-### Fix
-
-- CalendarHeader - Fix alignment for 'showWeekNumbers'.
-
-## [1.501.0] - 2020-12-03
-
-### Fix
-
-- Calendar - removing CalendarHeader props and extracting them from propTypes'.
-
-## [1.502.0] - 2020-12-03
-
-### Added
-
-- 'react-component-driver' setup.
-- Calendar - adding component tests.
-
-## [1.503.0] - 2020-12-7
-
-### Fix
-
-- Agenda, ReservationList, CalendarList - removed UNSAFE methods (PR #1356).
-
-## [1.504.0] - 2020-12-8
-
-### Change
-
-- Day components refactor.
diff --git a/node_modules/react-native-calendars/ISSUE_TEMPLATE.md b/node_modules/react-native-calendars/ISSUE_TEMPLATE.md
new file mode 100644
index 0000000..247538c
--- /dev/null
+++ b/node_modules/react-native-calendars/ISSUE_TEMPLATE.md
@@ -0,0 +1,36 @@
+Please make our job easier by filling this template out to completion. If you're requesting a feature instead of reporting a bug, please feel free to skip the Environment and Reproducible Demo sections.
+
+## Description
+
+1-2 sentences describing the problem you're having or the feature you'd like to request
+
+## Expected Behavior
+
+What action did you perform, and what did you expect to happen?
+
+## Observed Behavior
+
+What actually happened when you performed the above actions?
+
+If there's an error message, please paste the *full terminal output and error message* in this code block:
+
+```
+Error text goes here!
+```
+
+## Environment
+
+Please run these commands in the project folder and fill in their results:
+
+* `npm ls react-native-calendars`:
+* `npm ls react-native`:
+
+Also specify:
+
+1. Phone/emulator/simulator & version:
+
+## Reproducible Demo
+
+Please provide a minimized reproducible demonstration of the problem you're reporting.
+
+Issues that come with minimal repro's are resolved much more quickly than issues where a maintainer has to reproduce themselves.
diff --git a/node_modules/react-native-calendars/README.md b/node_modules/react-native-calendars/README.md
index 73f3ed2..f3e0a46 100644
--- a/node_modules/react-native-calendars/README.md
+++ b/node_modules/react-native-calendars/README.md
@@ -1,3 +1,9 @@
+**LOOKING FOR A MAINTAINER**
+We love this project, but currently we don’t have enough time to work on it. So we are looking for a maintainer. If you have enough time and knowledge and want to become one - please let us know (levv@wix.com, inbalti@wix.com, ethans@wix.com)
+
+---
+
+
 # React Native Calendars 🗓️ 📆
 [![Version](https://img.shields.io/npm/v/react-native-calendars.svg)](https://www.npmjs.com/package/react-native-calendars)
 [![Build Status](https://travis-ci.org/wix/react-native-calendars.svg?branch=master)](https://travis-ci.org/wix/react-native-calendars)
diff --git a/node_modules/react-native-calendars/babel.config.js b/node_modules/react-native-calendars/babel.config.js
deleted file mode 100644
index 6403cbe..0000000
--- a/node_modules/react-native-calendars/babel.config.js
+++ /dev/null
@@ -1,3 +0,0 @@
-module.exports = {
-  presets: ['module:metro-react-native-babel-preset']
-};
diff --git a/node_modules/react-native-calendars/e2e/agenda.spec.js b/node_modules/react-native-calendars/e2e/agenda.spec.js
new file mode 100644
index 0000000..46c798e
--- /dev/null
+++ b/node_modules/react-native-calendars/e2e/agenda.spec.js
@@ -0,0 +1,25 @@
+const {SELECT_DATE_SLOT, RESERVATION_DATE} = require('../src/testIDs');
+const testIDs = require('../example/src/testIDs');
+
+describe('Agenda', () => {
+  beforeEach(async () => {
+    await device.reloadReactNative();
+    await element(by.id(testIDs.menu.AGENDA)).tap();
+  });
+
+  it('should move to previous month', async () => {
+    await element(by.id(`${SELECT_DATE_SLOT}-2017-05-17`)).tap();
+    await element(by.id(`${SELECT_DATE_SLOT}-2017-05-18`)).tap();
+    await element(by.id(`${SELECT_DATE_SLOT}-2017-05-19`)).tap();
+    await element(by.id(`${SELECT_DATE_SLOT}-2017-05-20`)).tap();
+
+    await expect(element(by.text('20').withAncestor(by.id(RESERVATION_DATE)))).toBeVisible();
+  });
+
+  it('should tap agenda item and see an alert', async () => {
+    await element(by.text('Item for 2017-05-17 #0').withAncestor(by.id(testIDs.agenda.ITEM))).tap();
+    await expect(element(by.text('OK'))).toBeVisible();
+
+    await element(by.text('OK')).tap();
+  });
+});
\ No newline at end of file
diff --git a/node_modules/react-native-calendars/e2e/app.spec.js b/node_modules/react-native-calendars/e2e/app.spec.js
new file mode 100644
index 0000000..e172dd3
--- /dev/null
+++ b/node_modules/react-native-calendars/e2e/app.spec.js
@@ -0,0 +1,41 @@
+const testIDs = require('../example/src/testIDs');
+
+describe('Example app', () => {
+  beforeEach(async () => {
+    await device.reloadReactNative();
+  });
+
+  it('should have menu screen', async () => {
+    await expect(element(by.id(testIDs.menu.CONTAINER))).toBeVisible();
+  });
+
+  it('should open calendars screen', async () => {
+    await element(by.id(testIDs.menu.CALENDARS)).tap();
+    await expect(element(by.id(testIDs.calendars.CONTAINER))).toBeVisible();
+  });
+
+  it('should open calendar list screen', async () => {
+    await element(by.id(testIDs.menu.CALENDAR_LIST)).tap();
+    await expect(element(by.id(testIDs.calendarList.CONTAINER))).toBeVisible();
+  });
+
+  it('should open horizontal calendar list screen', async () => {
+    await element(by.id(testIDs.menu.HORIZONTAL_LIST)).tap();
+    await expect(element(by.id(testIDs.horizontalList.CONTAINER))).toBeVisible();
+  });
+
+  it('should open agenda screen', async () => {
+    await element(by.id(testIDs.menu.AGENDA)).tap();
+    await expect(element(by.id(testIDs.agenda.CONTAINER))).toBeVisible();
+  });
+
+  it('should open expandable calendar screen', async () => {
+    await element(by.id(testIDs.menu.EXPANDABLE_CALENDAR)).tap();
+    // await expect(element(by.id(testIDs.expandableCalendar.CONTAINER))).toBeVisible();
+  });
+
+  it('should open week calendar screen', async () => {
+    await element(by.id(testIDs.menu.WEEK_CALENDAR)).tap();
+    await expect(element(by.id(testIDs.weekCalendar.CONTAINER))).toBeVisible();
+  });
+});
diff --git a/node_modules/react-native-calendars/e2e/calendars.spec.js b/node_modules/react-native-calendars/e2e/calendars.spec.js
new file mode 100644
index 0000000..22d3a2b
--- /dev/null
+++ b/node_modules/react-native-calendars/e2e/calendars.spec.js
@@ -0,0 +1,31 @@
+const {HEADER_MONTH_NAME, CHANGE_MONTH_LEFT_ARROW, CHANGE_MONTH_RIGHT_ARROW} = require('../src/testIDs');
+const testIDs = require('../example/src/testIDs');
+
+describe('Calendars', () => {
+  const FIRST_CALENDAR = testIDs.calendars.FIRST;
+
+  beforeEach(async () => {
+    await device.reloadReactNative();
+    await element(by.id(testIDs.menu.CALENDARS)).tap();
+  });
+
+  it('should scroll calendars to the bottom', async () => {
+    await element(by.id(testIDs.calendars.CONTAINER)).scrollTo('bottom');
+    await expect(element(by.id(testIDs.calendars.LAST))).toBeVisible();
+  });
+
+  it('should move to previous month', async () => {
+    await expect(element(by.id(`${HEADER_MONTH_NAME}-${FIRST_CALENDAR}`))).toHaveText('February 2020');
+
+    await element(by.id(`${CHANGE_MONTH_LEFT_ARROW}-${FIRST_CALENDAR}`)).tap();
+    await expect(element(by.id(`${HEADER_MONTH_NAME}-${FIRST_CALENDAR}`))).toHaveText('January 2020');
+  });
+
+  it('should move to next month twice', async () => {
+    await expect(element(by.id(`${HEADER_MONTH_NAME}-${FIRST_CALENDAR}`))).toHaveText('February 2020');
+
+    await element(by.id(`${CHANGE_MONTH_RIGHT_ARROW}-${FIRST_CALENDAR}`)).tap();
+    await element(by.id(`${CHANGE_MONTH_RIGHT_ARROW}-${FIRST_CALENDAR}`)).tap();
+    await expect(element(by.id(`${HEADER_MONTH_NAME}-${FIRST_CALENDAR}`))).toHaveText('April 2020');
+  });
+});
\ No newline at end of file
diff --git a/node_modules/react-native-calendars/e2e/calendarsList.spec.js b/node_modules/react-native-calendars/e2e/calendarsList.spec.js
new file mode 100644
index 0000000..8a2c4f9
--- /dev/null
+++ b/node_modules/react-native-calendars/e2e/calendarsList.spec.js
@@ -0,0 +1,23 @@
+const testIDs = require('../example/src/testIDs');
+
+describe('Calendars List', () => {
+  const FIRST_CALENDAR = `${testIDs.calendarList.CONTAINER}_1528588800000`;
+  const LAST_CALENDAR = `${testIDs.calendarList.CONTAINER}_1654819200000`;
+
+  beforeEach(async () => {
+    await device.reloadReactNative();
+    await element(by.id(testIDs.menu.CALENDAR_LIST)).tap();
+  });
+
+  it('should scroll calendars to the top', async () => {
+    await element(by.id(testIDs.calendarList.CONTAINER)).scrollTo('top');
+    await expect(element(by.id(FIRST_CALENDAR))).toBeVisible();
+    await expect(element(by.id(FIRST_CALENDAR))).toHaveLabel('June 2018');
+  });
+
+  it('should scroll calendars to the bottom', async () => {
+    await element(by.id(testIDs.calendarList.CONTAINER)).scrollTo('bottom');
+    await expect(element(by.id(LAST_CALENDAR))).toBeVisible();
+    await expect(element(by.id(LAST_CALENDAR))).toHaveLabel('June 2022');
+  });
+});
\ No newline at end of file
diff --git a/node_modules/react-native-calendars/e2e/expandableCalendar.spec.js b/node_modules/react-native-calendars/e2e/expandableCalendar.spec.js
new file mode 100644
index 0000000..7e16cb0
--- /dev/null
+++ b/node_modules/react-native-calendars/e2e/expandableCalendar.spec.js
@@ -0,0 +1,25 @@
+const {CHANGE_MONTH_RIGHT_ARROW, CHANGE_MONTH_LEFT_ARROW, STATIC_HEADER} = require('../src/testIDs');
+const testIDs = require('../example/src/testIDs');
+
+describe('Expandable Calendar', () => {
+  beforeEach(async () => {
+    await device.reloadReactNative();
+    await element(by.id(testIDs.menu.EXPANDABLE_CALENDAR)).tap();
+  });
+
+  it('sanity', async () => {
+    const knobTestID = `${testIDs.expandableCalendar.CONTAINER}-knob`;
+
+    await waitFor(element(by.id(knobTestID))).toExist().withTimeout(2000);
+    await element(by.id(knobTestID)).swipe('down', 'fast');
+
+    await element(by.text('Pilates ABC').withAncestor(by.id(testIDs.agenda.ITEM))).tap();
+    await expect(element(by.text('OK'))).toBeVisible();
+    await element(by.text('OK')).tap();
+
+    await element(by.id(`${CHANGE_MONTH_RIGHT_ARROW}-${STATIC_HEADER}`)).tap();
+    await element(by.id(`${CHANGE_MONTH_LEFT_ARROW}-${STATIC_HEADER}`)).tap();
+
+    await element(by.id(knobTestID)).swipe('up', 'fast');
+  });
+});
diff --git a/node_modules/react-native-calendars/e2e/horizontalList.spec.js b/node_modules/react-native-calendars/e2e/horizontalList.spec.js
new file mode 100644
index 0000000..d5f5b35
--- /dev/null
+++ b/node_modules/react-native-calendars/e2e/horizontalList.spec.js
@@ -0,0 +1,24 @@
+const {HEADER_MONTH_NAME} = require('../src/testIDs');
+const testIDs = require('../example/src/testIDs');
+
+describe('Horizontal Calendar List', () => {
+  const FIRST_CALENDAR = `${testIDs.horizontalList.CONTAINER}_1526428800000`;
+  const LAST_CALENDAR = `${testIDs.horizontalList.CONTAINER}_1652659200000`;
+
+  beforeEach(async () => {
+    await device.reloadReactNative();
+    await element(by.id(testIDs.menu.HORIZONTAL_LIST)).tap();
+  });
+
+  it('should scroll calendars to the top', async () => {
+    await element(by.id(testIDs.horizontalList.CONTAINER)).scrollTo('left');
+    await expect(element(by.id(`${HEADER_MONTH_NAME}-${FIRST_CALENDAR}`))).toBeVisible();
+    await expect(element(by.id(`${HEADER_MONTH_NAME}-${FIRST_CALENDAR}`))).toHaveText('May 2018');
+  });
+
+  it('should scroll calendars to the bottom', async () => {
+    await element(by.id(testIDs.horizontalList.CONTAINER)).scrollTo('right');
+    await expect(element(by.id(`${HEADER_MONTH_NAME}-${LAST_CALENDAR}`))).toBeVisible();
+    await expect(element(by.id(`${HEADER_MONTH_NAME}-${LAST_CALENDAR}`))).toHaveText('May 2022');
+  });
+});
\ No newline at end of file
diff --git a/node_modules/react-native-calendars/e2e/init.js b/node_modules/react-native-calendars/e2e/init.js
new file mode 100644
index 0000000..b7b5835
--- /dev/null
+++ b/node_modules/react-native-calendars/e2e/init.js
@@ -0,0 +1,19 @@
+const detox = require('detox');
+const config = require('../package.json').detox;
+const adapter = require('detox/runners/mocha/adapter');
+
+before(async () => {
+  await detox.init(config);
+});
+
+beforeEach(async function () {
+  await adapter.beforeEach(this);
+});
+
+afterEach(async function () {
+  await adapter.afterEach(this);
+});
+
+after(async () => {
+  await detox.cleanup();
+});
diff --git a/node_modules/react-native-calendars/e2e/mocha.opts b/node_modules/react-native-calendars/e2e/mocha.opts
new file mode 100644
index 0000000..b82090c
--- /dev/null
+++ b/node_modules/react-native-calendars/e2e/mocha.opts
@@ -0,0 +1 @@
+--recursive --timeout 120000 --bail --file e2e/init.js
diff --git a/node_modules/react-native-calendars/e2e/week-calendar.spec.js b/node_modules/react-native-calendars/e2e/week-calendar.spec.js
new file mode 100644
index 0000000..cd8257a
--- /dev/null
+++ b/node_modules/react-native-calendars/e2e/week-calendar.spec.js
@@ -0,0 +1,21 @@
+// const testIDs = require('../example/src/testIDs');
+
+// describe('Week Calendar', () => {
+//   beforeEach(async () => {
+//     await device.reloadReactNative();
+//     await element(by.id(testIDs.menu.WEEK_CALENDAR)).tap();
+//   });
+
+//   it('sanity', async () => {
+//     await expect(element(by.id(testIDs.weekCalendar.CONTAINER))).toBeVisible();
+//     await expect(element(by.text('First Yoga').withAncestor(by.id(testIDs.agenda.ITEM)))).toBeVisible();
+//     await element(by.id(testIDs.weekCalendar.CONTAINER)).swipe('left', 'fast');
+//     await element(by.id(testIDs.weekCalendar.CONTAINER)).swipe('left', 'fast');
+//     await element(by.id(testIDs.weekCalendar.CONTAINER)).swipe('left', 'fast');
+//     await expect(element(by.text('Middle Yoga').withAncestor(by.id(testIDs.agenda.ITEM)))).toBeVisible();
+//     await element(by.id(testIDs.weekCalendar.CONTAINER)).swipe('right', 'fast');
+//     await element(by.id(testIDs.weekCalendar.CONTAINER)).swipe('right', 'fast');
+//     await element(by.id(testIDs.weekCalendar.CONTAINER)).swipe('right', 'fast');
+//     await expect(element(by.text('First Yoga').withAncestor(by.id(testIDs.agenda.ITEM)))).toBeVisible();
+//   });
+// });
diff --git a/node_modules/react-native-calendars/spec/runner.js b/node_modules/react-native-calendars/spec/runner.js
new file mode 100644
index 0000000..771b8b2
--- /dev/null
+++ b/node_modules/react-native-calendars/spec/runner.js
@@ -0,0 +1,6 @@
+import Jasmine from 'jasmine';
+import path from 'path';
+
+var jasmine = new Jasmine();
+jasmine.loadConfigFile(path.resolve(__dirname, 'support', 'jasmine.json'));
+jasmine.execute();
diff --git a/node_modules/react-native-calendars/spec/support/jasmine.json b/node_modules/react-native-calendars/spec/support/jasmine.json
new file mode 100644
index 0000000..b30a3c6
--- /dev/null
+++ b/node_modules/react-native-calendars/spec/support/jasmine.json
@@ -0,0 +1,8 @@
+{
+  "spec_dir": "src",
+  "spec_files": [
+    "*.spec.js"
+  ],
+  "stopSpecOnExpectationFailure": false,
+  "random": false
+}
diff --git a/node_modules/react-native-calendars/src/agenda/index.js b/node_modules/react-native-calendars/src/agenda/index.js
index 6ddafa8..1f17071 100644
--- a/node_modules/react-native-calendars/src/agenda/index.js
+++ b/node_modules/react-native-calendars/src/agenda/index.js
@@ -1,24 +1,25 @@
-import _ from 'lodash';
-import PropTypes from 'prop-types';
-import XDate from 'xdate';
 import React, {Component} from 'react';
 import * as ReactNative from 'react-native';
-import {extractComponentProps} from '../component-updater';
+import PropTypes from 'prop-types';
+import XDate from 'xdate';
+
 import {parseDate, xdateToData} from '../interface';
 import dateutils from '../dateutils';
-import {AGENDA_CALENDAR_KNOB} from '../testIDs';
-import {VelocityTracker} from '../input';
-import styleConstructor from './style';
 import CalendarList from '../calendar-list';
-import ReservationList from './reservation-list';
+import ReservationsList from './reservation-list';
+import styleConstructor from './style';
+import {VelocityTracker} from '../input';
+import {AGENDA_CALENDAR_KNOB} from '../testIDs';
+
 
 const HEADER_HEIGHT = 104;
 const KNOB_HEIGHT = 24;
-
 //Fallback for react-native-web or when RN version is < 0.44
 const {Text, View, Dimensions, Animated, ViewPropTypes} = ReactNative;
 const viewPropTypes =
-  typeof document !== 'undefined' ? PropTypes.shape({style: PropTypes.object}) : ViewPropTypes || View.propTypes;
+  typeof document !== 'undefined'
+    ? PropTypes.shape({style: PropTypes.object})
+    : ViewPropTypes || View.propTypes;
 
 /**
  * @description: Agenda component
@@ -31,13 +32,13 @@ export default class AgendaView extends Component {
   static displayName = 'Agenda';
 
   static propTypes = {
-    ...CalendarList.propTypes,
-    ...ReservationList.propTypes,
+    /** Specify theme properties to override specific styles for calendar parts. Default = {} */
+    theme: PropTypes.object,
     /** agenda container style */
     style: viewPropTypes.style,
     /** the list of items that have to be displayed in agenda. If you want to render item as empty date
-     the value of date key has to be an empty array []. If there exists no value for date key it is
-     considered that the date in question is not yet loaded */
+    the value of date key has to be an empty array []. If there exists no value for date key it is
+    considered that the date in question is not yet loaded */
     items: PropTypes.object,
     /** callback that gets called when items for a certain month should be loaded (month became visible) */
     loadItemsForMonth: PropTypes.func,
@@ -46,24 +47,65 @@ export default class AgendaView extends Component {
     /** callback that gets called on day press */
     onDayPress: PropTypes.func,
     /** callback that gets called when day changes while scrolling agenda list */
-    onDaychange: PropTypes.func, //TODO: Should be renamed 'onDayChange'
+    onDaychange: PropTypes.func,
+    /** specify how each item should be rendered in agenda */
+    renderItem: PropTypes.func,
+    /** specify how each date should be rendered. day can be undefined if the item is not first in that day. */
+    renderDay: PropTypes.func,
     /** specify how agenda knob should look like */
     renderKnob: PropTypes.func,
+    /** specify how empty date content with no items should be rendered */
+    renderEmptyDay: PropTypes.func,
+    /** specify what should be rendered instead of ActivityIndicator */
+    renderEmptyData: PropTypes.func,
+    /** specify your item comparison function for increased performance */
+    rowHasChanged: PropTypes.func,
+    /** Max amount of months allowed to scroll to the past. Default = 50 */
+    pastScrollRange: PropTypes.number,
+    /** Max amount of months allowed to scroll to the future. Default = 50 */
+    futureScrollRange: PropTypes.number,
     /** initially selected day */
-    selected: PropTypes.any, //TODO: Should be renamed 'selectedDay'
+    selected: PropTypes.any,
+    /** Minimum date that can be selected, dates before minDate will be grayed out. Default = undefined */
+    minDate: PropTypes.any,
+    /** Maximum date that can be selected, dates after maxDate will be grayed out. Default = undefined */
+    maxDate: PropTypes.any,
+    /** If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday. */
+    firstDay: PropTypes.number,
+    /** Collection of dates that have to be marked. Default = items */
+    markedDates: PropTypes.object,
+    /** Optional marking type if custom markedDates are provided */
+    markingType: PropTypes.string,/*
     /** Hide knob button. Default = false */
-    hideKnob: PropTypes.bool
+    hideKnob: PropTypes.bool,
+    /** Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting */
+    monthFormat: PropTypes.string,
+    /** A RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView. */
+    refreshControl: PropTypes.element,
+    /** If provided, a standard RefreshControl will be added for "Pull to Refresh" functionality. Make sure to also set the refreshing prop correctly. */
+    onRefresh: PropTypes.func,
+    /** Set this true while waiting for new data from a refresh. */
+    refreshing: PropTypes.bool,
+    /** Display loading indicator. Default = false */
+    displayLoadingIndicator: PropTypes.bool,
+    /** Called when the user begins dragging the agenda list. **/
+    onScrollBeginDrag: PropTypes.func,
+    /** Called when the user stops dragging the agenda list. **/
+    onScrollEndDrag: PropTypes.func,
+    /** Called when the momentum scroll starts for the agenda list. **/
+    onMomentumScrollBegin: PropTypes.func,
+    /** Called when the momentum scroll stops for the agenda list. **/
+    onMomentumScrollEnd: PropTypes.func
   };
 
   constructor(props) {
     super(props);
 
-    this.style = styleConstructor(props.theme);
+    this.styles = styleConstructor(props.theme);
 
     const windowSize = Dimensions.get('window');
     this.viewHeight = windowSize.height;
     this.viewWidth = windowSize.width;
-
     this.scrollTimeout = undefined;
     this.headerState = 'idle';
 
@@ -71,13 +113,18 @@ export default class AgendaView extends Component {
       scrollY: new Animated.Value(0),
       calendarIsReady: false,
       calendarScrollable: false,
-      firstReservationLoad: false,
-      selectedDay: parseDate(props.selected) || XDate(true),
-      topDay: parseDate(props.selected) || XDate(true)
+      firstResevationLoad: false,
+      selectedDay: parseDate(this.props.selected) || XDate(true),
+      topDay: parseDate(this.props.selected) || XDate(true)
     };
 
     this.currentMonth = this.state.selectedDay.clone();
-
+    this.onLayout = this.onLayout.bind(this);
+    this.onTouchStart = this.onTouchStart.bind(this);
+    this.onTouchEnd = this.onTouchEnd.bind(this);
+    this.onStartDrag = this.onStartDrag.bind(this);
+    this.onSnapAfterDrag = this.onSnapAfterDrag.bind(this);
+    this.generateMarkings = this.generateMarkings.bind(this);
     this.knobTracker = new VelocityTracker();
     this.state.scrollY.addListener(({value}) => this.knobTracker.add(value));
   }
@@ -92,27 +139,23 @@ export default class AgendaView extends Component {
     this.state.scrollY.removeAllListeners();
   }
 
-  componentDidUpdate(prevProps) {
-    if (!prevProps.items) {
-      this.loadReservations(this.props);
-    }
-  }
-
-  static getDerivedStateFromProps(nextProps) {
-    if (nextProps.items) {
-      return {firstReservationLoad: false};
+  UNSAFE_componentWillReceiveProps(props) {
+    if (props.items) {
+      this.setState({
+        firstResevationLoad: false
+      });
+    } else {
+      this.loadReservations(props);
     }
-
-    return null;
   }
 
   calendarOffset() {
-    return 96 - this.viewHeight / 2;
+    return 96 - (this.viewHeight / 2);
   }
 
   initialScrollPadPosition = () => {
     return Math.max(0, this.viewHeight - HEADER_HEIGHT);
-  };
+  }
 
   setScrollPadPosition = (y, animated) => {
     if (this.scrollPad.scrollTo) {
@@ -121,83 +164,8 @@ export default class AgendaView extends Component {
       // Support for RN O.61 (Expo 37)
       this.scrollPad.getNode().scrollTo({x: 0, y, animated});
     }
-  };
-
-  enableCalendarScrolling() {
-    this.setState({
-      calendarScrollable: true
-    });
-
-    _.invoke(this.props, 'onCalendarToggled', true);
-
-    // Enlarge calendarOffset here as a workaround on iOS to force repaint.
-    // Otherwise the month after current one or before current one remains invisible.
-    // The problem is caused by overflow: 'hidden' style, which we need for dragging
-    // to be performant.
-    // Another working solution for this bug would be to set removeClippedSubviews={false}
-    // in CalendarList listView, but that might impact performance when scrolling
-    // month list in expanded CalendarList.
-    // Further info https://github.com/facebook/react-native/issues/1831
-    this.calendar.scrollToDay(this.state.selectedDay, this.calendarOffset() + 1, true);
-  }
-
-  loadReservations(props) {
-    if ((!props.items || !Object.keys(props.items).length) && !this.state.firstReservationLoad) {
-      this.setState(
-        {
-          firstReservationLoad: true
-        },
-        () => {
-          _.invoke(this.props, 'loadItemsForMonth', xdateToData(this.state.selectedDay));
-        }
-      );
-    }
   }
 
-  chooseDayFromCalendar = d => {
-    this.chooseDay(d, !this.state.calendarScrollable);
-  };
-
-  chooseDay(d, optimisticScroll) {
-    const day = parseDate(d);
-
-    this.setState({
-      calendarScrollable: false,
-      selectedDay: day.clone()
-    });
-
-    _.invoke(this.props, 'onCalendarToggled', false);
-
-    if (!optimisticScroll) {
-      this.setState({
-        topDay: day.clone()
-      });
-    }
-
-    this.setScrollPadPosition(this.initialScrollPadPosition(), true);
-    this.calendar.scrollToDay(day, this.calendarOffset(), true);
-
-    _.invoke(this.props, 'loadItemsForMonth', xdateToData(day));
-    _.invoke(this.props, 'onDayPress', xdateToData(day));
-  }
-
-  generateMarkings = () => {
-    const {markedDates, items} = this.props;
-    let markings = markedDates;
-
-    if (!markings) {
-      markings = {};
-      Object.keys(items || {}).forEach(key => {
-        if (items[key] && items[key].length) {
-          markings[key] = {marked: true};
-        }
-      });
-    }
-
-    const key = this.state.selectedDay.toString('yyyy-MM-dd');
-    return {...markings, [key]: {...(markings[key] || {}), ...{selected: true}}};
-  };
-
   onScrollPadLayout = () => {
     // When user touches knob, the actual component that receives touch events is a ScrollView.
     // It needs to be scrolled to the bottom, so that when user moves finger downwards,
@@ -205,26 +173,22 @@ export default class AgendaView extends Component {
     this.setScrollPadPosition(this.initialScrollPadPosition(), false);
     // delay rendering calendar in full height because otherwise it still flickers sometimes
     setTimeout(() => this.setState({calendarIsReady: true}), 0);
-  };
-
-  onCalendarListLayout = () => {
-    this.calendar.scrollToDay(this.state.selectedDay.clone(), this.calendarOffset(), false);
-  };
+  }
 
-  onLayout = event => {
+  onLayout(event) {
     this.viewHeight = event.nativeEvent.layout.height;
     this.viewWidth = event.nativeEvent.layout.width;
     this.forceUpdate();
-  };
+  }
 
-  onTouchStart = () => {
+  onTouchStart() {
     this.headerState = 'touched';
     if (this.knob) {
       this.knob.setNativeProps({style: {opacity: 0.5}});
     }
-  };
+  }
 
-  onTouchEnd = () => {
+  onTouchEnd() {
     if (this.knob) {
       this.knob.setNativeProps({style: {opacity: 1}});
     }
@@ -235,144 +199,197 @@ export default class AgendaView extends Component {
     }
 
     this.headerState = 'idle';
-  };
+  }
 
-  onStartDrag = () => {
+  onStartDrag() {
     this.headerState = 'dragged';
     this.knobTracker.reset();
-  };
+  }
 
-  onSnapAfterDrag = e => {
+  onSnapAfterDrag(e) {
     // on Android onTouchEnd is not called if dragging was started
     this.onTouchEnd();
     const currentY = e.nativeEvent.contentOffset.y;
     this.knobTracker.add(currentY);
-    const projectedY = currentY + this.knobTracker.estimateSpeed() * 250; /*ms*/
+    const projectedY = currentY + this.knobTracker.estimateSpeed() * 250/*ms*/;
     const maxY = this.initialScrollPadPosition();
-    const snapY = projectedY > maxY / 2 ? maxY : 0;
+    const snapY = (projectedY > maxY / 2) ? maxY : 0;
     this.setScrollPadPosition(snapY, true);
 
     if (snapY === 0) {
       this.enableCalendarScrolling();
     }
-  };
-
-  onVisibleMonthsChange = months => {
-    _.invoke(this.props, 'onVisibleMonthsChange', months);
+  }
 
-    if (this.props.items && !this.state.firstReservationLoad) {
+  onVisibleMonthsChange(months) {
+    if (this.props.onVisibleMonthsChange) {
+      this.props.onVisibleMonthsChange(months);
+    }
+    if (this.props.items && !this.state.firstResevationLoad) {
       clearTimeout(this.scrollTimeout);
-
       this.scrollTimeout = setTimeout(() => {
-        if (this._isMounted) {
-          _.invoke(this.props, 'loadItemsForMonth', months[0]);
+        if (this.props.loadItemsForMonth && this._isMounted) {
+          this.props.loadItemsForMonth(months[0]);
         }
       }, 200);
     }
-  };
+  }
 
-  onDayChange = day => {
-    const newDate = parseDate(day);
-    const withAnimation = dateutils.sameMonth(newDate, this.state.selectedDay);
+  loadReservations(props) {
+    if ((!props.items || !Object.keys(props.items).length) && !this.state.firstResevationLoad) {
+      this.setState({
+        firstResevationLoad: true
+      }, () => {
+        if (this.props.loadItemsForMonth) {
+          this.props.loadItemsForMonth(xdateToData(this.state.selectedDay));
+        }
+      });
+    }
+  }
 
-    this.calendar.scrollToDay(day, this.calendarOffset(), withAnimation);
+  enableCalendarScrolling() {
     this.setState({
-      selectedDay: newDate
+      calendarScrollable: true
     });
 
-    _.invoke(this.props, 'onDayChange', xdateToData(newDate));
-  };
+    if (this.props.onCalendarToggled) {
+      this.props.onCalendarToggled(true);
+    }
+    // Enlarge calendarOffset here as a workaround on iOS to force repaint.
+    // Otherwise the month after current one or before current one remains invisible.
+    // The problem is caused by overflow: 'hidden' style, which we need for dragging
+    // to be performant.
+    // Another working solution for this bug would be to set removeClippedSubviews={false}
+    // in CalendarList listView, but that might impact performance when scrolling
+    // month list in expanded CalendarList.
+    // Further info https://github.com/facebook/react-native/issues/1831
+    this.calendar.scrollToDay(this.state.selectedDay, this.calendarOffset() + 1, true);
+  }
 
-  renderReservations() {
-    const reservationListProps = extractComponentProps(ReservationList, this.props);
+  _chooseDayFromCalendar(d) {
+    this.chooseDay(d, !this.state.calendarScrollable);
+  }
+
+  chooseDay(d, optimisticScroll) {
+    const day = parseDate(d);
+
+    this.setState({
+      calendarScrollable: false,
+      selectedDay: day.clone()
+    });
+
+    if (this.props.onCalendarToggled) {
+      this.props.onCalendarToggled(false);
+    }
+
+    if (!optimisticScroll) {
+      this.setState({
+        topDay: day.clone()
+      });
+    }
+
+    this.setScrollPadPosition(this.initialScrollPadPosition(), true);
+    this.calendar.scrollToDay(day, this.calendarOffset(), true);
+
+    if (this.props.loadItemsForMonth) {
+      this.props.loadItemsForMonth(xdateToData(day));
+    }
 
+    if (this.props.onDayPress) {
+      this.props.onDayPress(xdateToData(day));
+    }
+  }
+
+  renderReservations() {
     return (
-      <ReservationList
-        {...reservationListProps}
-        ref={c => (this.list = c)}
+      <ReservationsList
+        onScrollBeginDrag={this.props.onScrollBeginDrag}
+        onScrollEndDrag={this.props.onScrollEndDrag}
+        onMomentumScrollBegin={this.props.onMomentumScrollBegin}
+        onMomentumScrollEnd={this.props.onMomentumScrollEnd}
+        refreshControl={this.props.refreshControl}
+        refreshing={this.props.refreshing}
+        onRefresh={this.props.onRefresh}
+        rowHasChanged={this.props.rowHasChanged}
+        renderItem={this.props.renderItem}
+        renderDay={this.props.renderDay}
+        renderEmptyDate={this.props.renderEmptyDate}
         reservations={this.props.items}
         selectedDay={this.state.selectedDay}
+        renderEmptyData={this.props.renderEmptyData}
         topDay={this.state.topDay}
-        onDayChange={this.onDayChange}
-        onScroll={() => {}}
+        onDayChange={this.onDayChange.bind(this)}
+        onScroll={() => { }}
+        ref={(c) => this.list = c}
+        theme={this.props.theme}
       />
     );
   }
 
-  renderCalendarList() {
-    const shouldHideExtraDays = this.state.calendarScrollable ? this.props.hideExtraDays : false;
-    const calendarListProps = extractComponentProps(CalendarList, this.props);
+  onDayChange(day) {
+    const newDate = parseDate(day);
+    const withAnimation = dateutils.sameMonth(newDate, this.state.selectedDay);
 
-    return (
-      <CalendarList
-        {...calendarListProps}
-        ref={c => (this.calendar = c)}
-        current={this.currentMonth}
-        markedDates={this.generateMarkings()}
-        calendarWidth={this.viewWidth}
-        scrollEnabled={this.state.calendarScrollable}
-        hideExtraDays={shouldHideExtraDays}
-        onLayout={this.onCalendarListLayout}
-        onDayPress={this.chooseDayFromCalendar}
-        onVisibleMonthsChange={this.onVisibleMonthsChange}
-      />
-    );
+    this.calendar.scrollToDay(day, this.calendarOffset(), withAnimation);
+    this.setState({
+      selectedDay: parseDate(day)
+    });
+
+    if (this.props.onDayChange) {
+      this.props.onDayChange(xdateToData(newDate));
+    }
   }
 
-  renderKnob() {
-    const {hideKnob, renderKnob} = this.props;
-    let knob = <View style={this.style.knobContainer} />;
+  generateMarkings() {
+    let markings = this.props.markedDates;
 
-    if (!hideKnob) {
-      const knobView = renderKnob ? renderKnob() : <View style={this.style.knob} />;
-      knob = this.state.calendarScrollable ? null : (
-        <View style={this.style.knobContainer}>
-          <View ref={c => (this.knob = c)}>{knobView}</View>
-        </View>
-      );
+    if (!markings) {
+      markings = {};
+      Object.keys(this.props.items || {}).forEach(key => {
+        if (this.props.items[key] && this.props.items[key].length) {
+          markings[key] = {marked: true};
+        }
+      });
     }
-    return knob;
+
+    const key = this.state.selectedDay.toString('yyyy-MM-dd');
+    return {...markings, [key]: {...(markings[key] || {}), ...{selected: true}}};
   }
 
   render() {
-    const {firstDay, hideKnob, showWeekNumbers, style, testID} = this.props;
     const agendaHeight = this.initialScrollPadPosition();
-    const weekDaysNames = dateutils.weekDayNames(firstDay);
-    const weekdaysStyle = [
-      this.style.weekdays,
-      {
-        opacity: this.state.scrollY.interpolate({
-          inputRange: [agendaHeight - HEADER_HEIGHT, agendaHeight],
-          outputRange: [0, 1],
+    const weekDaysNames = dateutils.weekDayNames(this.props.firstDay);
+
+    const weekdaysStyle = [this.styles.weekdays, {
+      opacity: this.state.scrollY.interpolate({
+        inputRange: [agendaHeight - HEADER_HEIGHT, agendaHeight],
+        outputRange: [0, 1],
+        extrapolate: 'clamp'
+      }),
+      transform: [{
+        translateY: this.state.scrollY.interpolate({
+          inputRange: [Math.max(0, agendaHeight - HEADER_HEIGHT), agendaHeight],
+          outputRange: [-HEADER_HEIGHT, 0],
           extrapolate: 'clamp'
-        }),
-        transform: [
-          {
-            translateY: this.state.scrollY.interpolate({
-              inputRange: [Math.max(0, agendaHeight - HEADER_HEIGHT), agendaHeight],
-              outputRange: [-HEADER_HEIGHT, 0],
-              extrapolate: 'clamp'
-            })
-          }
-        ]
-      }
-    ];
+        })
+      }]
+    }];
+
     const headerTranslate = this.state.scrollY.interpolate({
       inputRange: [0, agendaHeight],
       outputRange: [agendaHeight, 0],
       extrapolate: 'clamp'
     });
+
     const contentTranslate = this.state.scrollY.interpolate({
       inputRange: [0, agendaHeight],
       outputRange: [0, agendaHeight / 2],
       extrapolate: 'clamp'
     });
+
     const headerStyle = [
-      this.style.header,
-      {
-        bottom: agendaHeight,
-        transform: [{translateY: headerTranslate}]
-      }
+      this.styles.header,
+      {bottom: agendaHeight, transform: [{translateY: headerTranslate}]}
     ];
 
     if (!this.state.calendarIsReady) {
@@ -382,8 +399,9 @@ export default class AgendaView extends Component {
       weekdaysStyle.push({height: HEADER_HEIGHT});
     }
 
-    const shouldAllowDragging = !hideKnob && !this.state.calendarScrollable;
+    const shouldAllowDragging = !this.props.hideKnob && !this.state.calendarScrollable;
     const scrollPadPosition = (shouldAllowDragging ? HEADER_HEIGHT : 0) - KNOB_HEIGHT;
+
     const scrollPadStyle = {
       position: 'absolute',
       width: 80,
@@ -392,36 +410,76 @@ export default class AgendaView extends Component {
       left: (this.viewWidth - 80) / 2
     };
 
+    let knob = (<View style={this.styles.knobContainer}/>);
+
+    if (!this.props.hideKnob) {
+      const knobView = this.props.renderKnob ? this.props.renderKnob() : (<View style={this.styles.knob}/>);
+      knob = this.state.calendarScrollable ? null : (
+        <View style={this.styles.knobContainer}>
+          <View ref={(c) => this.knob = c}>{knobView}</View>
+        </View>
+      );
+    }
+    const shouldHideExtraDays = this.state.calendarScrollable ? this.props.hideExtraDays : false;
+
     return (
-      <View testID={testID} onLayout={this.onLayout} style={[style, {flex: 1, overflow: 'hidden'}]}>
-        <View style={this.style.reservations}>{this.renderReservations()}</View>
+      <View testID={this.props.testID} onLayout={this.onLayout} style={[this.props.style, {flex: 1, overflow: 'hidden'}]}>
+        <View style={this.styles.reservations}>
+          {this.renderReservations()}
+        </View>
         <Animated.View style={headerStyle}>
           <Animated.View style={{flex: 1, transform: [{translateY: contentTranslate}]}}>
-            {this.renderCalendarList()}
+            <CalendarList
+              onLayout={() => {
+                this.calendar.scrollToDay(this.state.selectedDay.clone(), this.calendarOffset(), false);
+              }}
+              calendarWidth={this.viewWidth}
+              theme={this.props.theme}
+              onVisibleMonthsChange={this.onVisibleMonthsChange.bind(this)}
+              ref={(c) => this.calendar = c}
+              minDate={this.props.minDate}
+              maxDate={this.props.maxDate}
+              current={this.currentMonth}
+              markedDates={this.generateMarkings()}
+              markingType={this.props.markingType}
+              removeClippedSubviews={this.props.removeClippedSubviews}
+              onDayPress={this._chooseDayFromCalendar.bind(this)}
+              scrollEnabled={this.state.calendarScrollable}
+              hideExtraDays={shouldHideExtraDays}
+              firstDay={this.props.firstDay}
+              monthFormat={this.props.monthFormat}
+              pastScrollRange={this.props.pastScrollRange}
+              futureScrollRange={this.props.futureScrollRange}
+              dayComponent={this.props.dayComponent}
+              disabledByDefault={this.props.disabledByDefault}
+              displayLoadingIndicator={this.props.displayLoadingIndicator}
+              showWeekNumbers={this.props.showWeekNumbers}
+            />
           </Animated.View>
-          {this.renderKnob()}
+          {knob}
         </Animated.View>
         <Animated.View style={weekdaysStyle}>
-          {showWeekNumbers && <Text allowFontScaling={false} style={this.style.weekday} numberOfLines={1}></Text>}
+          {this.props.showWeekNumbers && <Text allowFontScaling={false} style={this.styles.weekday} numberOfLines={1}></Text>}
           {weekDaysNames.map((day, index) => (
-            <Text allowFontScaling={false} key={day + index} style={this.style.weekday} numberOfLines={1}>
-              {day}
-            </Text>
+            <Text allowFontScaling={false} key={day + index} style={this.styles.weekday} numberOfLines={1}>{day}</Text>
           ))}
         </Animated.View>
         <Animated.ScrollView
-          ref={ref => (this.scrollPad = ref)}
-          style={scrollPadStyle}
-          overScrollMode="never"
+          ref={ref => this.scrollPad = ref}
+          overScrollMode='never'
           showsHorizontalScrollIndicator={false}
           showsVerticalScrollIndicator={false}
+          style={scrollPadStyle}
           scrollEventThrottle={8}
           scrollsToTop={false}
           onTouchStart={this.onTouchStart}
           onTouchEnd={this.onTouchEnd}
           onScrollBeginDrag={this.onStartDrag}
           onScrollEndDrag={this.onSnapAfterDrag}
-          onScroll={Animated.event([{nativeEvent: {contentOffset: {y: this.state.scrollY}}}], {useNativeDriver: true})}
+          onScroll={Animated.event(
+            [{nativeEvent: {contentOffset: {y: this.state.scrollY}}}],
+            {useNativeDriver: true}
+          )}
         >
           <View
             testID={AGENDA_CALENDAR_KNOB}
diff --git a/node_modules/react-native-calendars/src/agenda/reservation-list/index.js b/node_modules/react-native-calendars/src/agenda/reservation-list/index.js
index 7210cb8..acf44a4 100644
--- a/node_modules/react-native-calendars/src/agenda/reservation-list/index.js
+++ b/node_modules/react-native-calendars/src/agenda/reservation-list/index.js
@@ -1,87 +1,62 @@
-import _ from 'lodash';
-import PropTypes from 'prop-types';
-import XDate from 'xdate';
 import React, {Component} from 'react';
 import {FlatList, ActivityIndicator, View} from 'react-native';
-import {extractComponentProps} from '../../component-updater';
+import Reservation from './reservation';
+import PropTypes from 'prop-types';
+import XDate from 'xdate';
+
 import dateutils from '../../dateutils';
 import styleConstructor from './style';
-import Reservation from './reservation';
+
 
 class ReservationList extends Component {
   static displayName = 'IGNORE';
 
   static propTypes = {
-    ...Reservation.propTypes,
-    /** the list of items that have to be displayed in agenda. If you want to render item as empty date
-    the value of date key kas to be an empty array []. If there exists no value for date key it is
-    considered that the date in question is not yet loaded */ 
+    // specify your item comparison function for increased performance
+    rowHasChanged: PropTypes.func,
+    // specify how each item should be rendered in agenda
+    renderItem: PropTypes.func,
+    // specify how each date should be rendered. day can be undefined if the item is not first in that day.
+    renderDay: PropTypes.func,
+    // specify how empty date content with no items should be rendered
+    renderEmptyDate: PropTypes.func,
+    // callback that gets called when day changes while scrolling agenda list
+    onDayChange: PropTypes.func,
+    // onScroll ListView event
+    onScroll: PropTypes.func,
+    // the list of items that have to be displayed in agenda. If you want to render item as empty date
+    // the value of date key kas to be an empty array []. If there exists no value for date key it is
+    // considered that the date in question is not yet loaded
     reservations: PropTypes.object,
     selectedDay: PropTypes.instanceOf(XDate),
     topDay: PropTypes.instanceOf(XDate),
-    /** Show items only for the selected day. Default = false. */
-    showOnlySelectedDayItems: PropTypes.bool,
-    /** callback that gets called when day changes while scrolling agenda list. */ 
-    onDayChange: PropTypes.func,
-    /** specify what should be rendered instead of ActivityIndicator. */
-    renderEmptyData: PropTypes.func,
-
-    /** onScroll ListView event */
-    onScroll: PropTypes.func,
-    /** Called when the user begins dragging the agenda list. **/
+    refreshControl: PropTypes.element,
+    refreshing: PropTypes.bool,
+    onRefresh: PropTypes.func,
     onScrollBeginDrag: PropTypes.func,
-    /** Called when the user stops dragging the agenda list. **/
     onScrollEndDrag: PropTypes.func,
-    /** Called when the momentum scroll starts for the agenda list. **/
     onMomentumScrollBegin: PropTypes.func,
-    /** Called when the momentum scroll stops for the agenda list. **/
-    onMomentumScrollEnd: PropTypes.func,
-    /** A RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView. */
-    refreshControl: PropTypes.element,
-    /** Set this true while waiting for new data from a refresh. */
-    refreshing: PropTypes.bool,
-    /** If provided, a standard RefreshControl will be added for "Pull to Refresh" functionality. Make sure to also set the refreshing prop correctly. */
-    onRefresh: PropTypes.func
-  };
-
-  static defaultProps = {
-    refreshing: false,
-    selectedDay: XDate(true)
+    onMomentumScrollEnd: PropTypes.func
   };
 
   constructor(props) {
     super(props);
 
-    this.style = styleConstructor(props.theme);
+    this.styles = styleConstructor(props.theme);
 
     this.state = {
       reservations: []
     };
 
-    this.heights = [];
-    this.selectedDay = props.selectedDay;
+    this.heights=[];
+    this.selectedDay = this.props.selectedDay;
     this.scrollOver = true;
   }
 
-  componentDidMount() {
+  UNSAFE_componentWillMount() {
     this.updateDataSource(this.getReservations(this.props).reservations);
   }
 
-  componentDidUpdate(prevProps) {
-    if (prevProps !== this.props) {
-      if (!dateutils.sameDate(prevProps.topDay, this.props.topDay)) {
-        this.setState(
-          {
-            reservations: []
-          },
-          () => this.updateReservations(this.props)
-        );
-      } else {
-        this.updateReservations(this.props);
-      }
-    }
-  }
-
   updateDataSource(reservations) {
     this.setState({
       reservations
@@ -89,9 +64,8 @@ class ReservationList extends Component {
   }
 
   updateReservations(props) {
-    const {selectedDay} = props;
     const reservations = this.getReservations(props);
-    if (this.list && !dateutils.sameDate(selectedDay, this.selectedDay)) {
+    if (this.list && !dateutils.sameDate(props.selectedDay, this.selectedDay)) {
       let scrollPosition = 0;
       for (let i = 0; i < reservations.scrollPosition; i++) {
         scrollPosition += this.heights[i] || 0;
@@ -99,10 +73,62 @@ class ReservationList extends Component {
       this.scrollOver = false;
       this.list.scrollToOffset({offset: scrollPosition, animated: true});
     }
-    this.selectedDay = selectedDay;
+    this.selectedDay = props.selectedDay;
     this.updateDataSource(reservations.reservations);
   }
 
+  UNSAFE_componentWillReceiveProps(props) {
+    if (!dateutils.sameDate(props.topDay, this.props.topDay)) {
+      this.setState({
+        reservations: []
+      }, () => {
+        this.updateReservations(props);
+      });
+    } else {
+      this.updateReservations(props);
+    }
+  }
+
+  onScroll(event) {
+    const yOffset = event.nativeEvent.contentOffset.y;
+    this.props.onScroll(yOffset);
+    let topRowOffset = 0;
+    let topRow;
+    for (topRow = 0; topRow < this.heights.length; topRow++) {
+      if (topRowOffset + this.heights[topRow] / 2 >= yOffset) {
+        break;
+      }
+      topRowOffset += this.heights[topRow];
+    }
+    const row = this.state.reservations[topRow];
+    if (!row) return;
+    const day = row.day;
+    const sameDate = dateutils.sameDate(day, this.selectedDay);
+    if (!sameDate && this.scrollOver) {
+      this.selectedDay = day.clone();
+      this.props.onDayChange(day.clone());
+    }
+  }
+
+  onRowLayoutChange(ind, event) {
+    this.heights[ind] = event.nativeEvent.layout.height;
+  }
+
+  renderRow({item, index}) {
+    return (
+      <View onLayout={this.onRowLayoutChange.bind(this, index)}>
+        <Reservation
+          item={item}
+          renderItem={this.props.renderItem}
+          renderDay={this.props.renderDay}
+          renderEmptyDate={this.props.renderEmptyDate}
+          theme={this.props.theme}
+          rowHasChanged={this.props.rowHasChanged}
+        />
+      </View>
+    );
+  }
+
   getReservationsForDay(iterator, props) {
     const day = iterator.clone();
     const res = props.reservations[day.toString('yyyy-MM-dd')];
@@ -115,28 +141,27 @@ class ReservationList extends Component {
         };
       });
     } else if (res) {
-      return [
-        {
-          date: iterator.clone(),
-          day
-        }
-      ];
+      return [{
+        date: iterator.clone(),
+        day
+      }];
     } else {
       return false;
     }
   }
 
+  onListTouch() {
+    this.scrollOver = true;
+  }
+
   getReservations(props) {
-    const {selectedDay, showOnlySelectedDayItems} = props;
-    if (!props.reservations || !selectedDay) {
+    if (!props.reservations || !props.selectedDay) {
       return {reservations: [], scrollPosition: 0};
     }
-
     let reservations = [];
     if (this.state.reservations && this.state.reservations.length) {
       const iterator = this.state.reservations[0].day.clone();
-
-      while (iterator.getTime() < selectedDay.getTime()) {
+      while (iterator.getTime() < props.selectedDay.getTime()) {
         const res = this.getReservationsForDay(iterator, props);
         if (!res) {
           reservations = [];
@@ -147,101 +172,43 @@ class ReservationList extends Component {
         iterator.addDays(1);
       }
     }
-
     const scrollPosition = reservations.length;
-    const iterator = selectedDay.clone();
-    if (showOnlySelectedDayItems) {
+    const iterator = props.selectedDay.clone();
+    for (let i = 0; i < 31; i++) {
       const res = this.getReservationsForDay(iterator, props);
-
       if (res) {
-        reservations = res;
+        reservations = reservations.concat(res);
       }
       iterator.addDays(1);
-    } else {
-      for (let i = 0; i < 31; i++) {
-        const res = this.getReservationsForDay(iterator, props);
-
-        if (res) {
-          reservations = reservations.concat(res);
-        }
-        iterator.addDays(1);
-      }
     }
 
     return {reservations, scrollPosition};
   }
 
-  onScroll = event => {
-    const yOffset = event.nativeEvent.contentOffset.y;
-    _.invoke(this.props, 'onScroll', yOffset);
-
-    let topRowOffset = 0;
-    let topRow;
-    for (topRow = 0; topRow < this.heights.length; topRow++) {
-      if (topRowOffset + this.heights[topRow] / 2 >= yOffset) {
-        break;
-      }
-      topRowOffset += this.heights[topRow];
-    }
-
-    const row = this.state.reservations[topRow];
-    if (!row) return;
-
-    const day = row.day;
-    const sameDate = dateutils.sameDate(day, this.selectedDay);
-    if (!sameDate && this.scrollOver) {
-      this.selectedDay = day.clone();
-      _.invoke(this.props, 'onDayChange', day.clone());
-    }
-  };
-
-  onListTouch() {
-    this.scrollOver = true;
-  }
-
-  onRowLayoutChange(ind, event) {
-    this.heights[ind] = event.nativeEvent.layout.height;
-  }
-
-  onMoveShouldSetResponderCapture = () => {
-    this.onListTouch();
-    return false;
-  };
-
-  renderRow = ({item, index}) => {
-    const reservationProps = extractComponentProps(Reservation, this.props);
-
-    return (
-      <View onLayout={this.onRowLayoutChange.bind(this, index)}>
-        <Reservation {...reservationProps} item={item} />
-      </View>
-    );
-  };
-
   render() {
-    const {reservations, selectedDay, theme, style} = this.props;
-    if (!reservations || !reservations[selectedDay.toString('yyyy-MM-dd')]) {
-      if (_.isFunction(this.props.renderEmptyData)) {
-        return _.invoke(this.props, 'renderEmptyData');
+    const {reservations} = this.props;
+    if (!reservations || !reservations[this.props.selectedDay.toString('yyyy-MM-dd')]) {
+      if (this.props.renderEmptyData) {
+        return this.props.renderEmptyData();
       }
-
-      return <ActivityIndicator style={this.style.indicator} color={theme && theme.indicatorColor} />;
+      return (
+        <ActivityIndicator style={{marginTop: 80}} color={this.props.theme && this.props.theme.indicatorColor}/>
+      );
     }
-
     return (
       <FlatList
-        ref={c => (this.list = c)}
-        style={style}
-        contentContainerStyle={this.style.content}
+        ref={(c) => this.list = c}
+        style={this.props.style}
+        contentContainerStyle={this.styles.content}
+        renderItem={this.renderRow.bind(this)}
         data={this.state.reservations}
-        renderItem={this.renderRow}
-        keyExtractor={(item, index) => String(index)}
+        onScroll={this.onScroll.bind(this)}
         showsVerticalScrollIndicator={false}
         scrollEventThrottle={200}
-        onMoveShouldSetResponderCapture={this.onMoveShouldSetResponderCapture}
-        onScroll={this.onScroll}
+        onMoveShouldSetResponderCapture={() => {this.onListTouch(); return false;}}
+        keyExtractor={(item, index) => String(index)}
         refreshControl={this.props.refreshControl}
-        refreshing={this.props.refreshing}
+        refreshing={this.props.refreshing || false}
         onRefresh={this.props.onRefresh}
         onScrollBeginDrag={this.props.onScrollBeginDrag}
         onScrollEndDrag={this.props.onScrollEndDrag}
diff --git a/node_modules/react-native-calendars/src/agenda/reservation-list/reservation.js b/node_modules/react-native-calendars/src/agenda/reservation-list/reservation.js
index 0d79bd1..097cd81 100644
--- a/node_modules/react-native-calendars/src/agenda/reservation-list/reservation.js
+++ b/node_modules/react-native-calendars/src/agenda/reservation-list/reservation.js
@@ -1,41 +1,27 @@
 import _ from 'lodash';
-import PropTypes from 'prop-types';
-import XDate from 'xdate';
 import React, {Component} from 'react';
 import {View, Text} from 'react-native';
+
 import {xdateToData} from '../../interface';
+import XDate from 'xdate';
 import dateutils from '../../dateutils';
-import {RESERVATION_DATE} from '../../testIDs';
 import styleConstructor from './style';
+import {RESERVATION_DATE} from '../../testIDs';
+
 
 class Reservation extends Component {
   static displayName = 'IGNORE';
 
-  static propTypes = {
-    item: PropTypes.any,
-    /** Specify theme properties to override specific styles for reservation parts. Default = {}. */
-    theme: PropTypes.object,
-    /** specify your item comparison function for increased performance. */
-    rowHasChanged: PropTypes.func,
-    /** specify how each date should be rendered. day can be undefined if the item is not first in that day. */
-    renderDay: PropTypes.func,
-    /** specify how each item should be rendered in agenda. */
-    renderItem: PropTypes.func,
-    /** specify how empty date content with no items should be rendered. */
-    renderEmptyDate: PropTypes.func
-  };
-
   constructor(props) {
     super(props);
 
-    this.style = styleConstructor(props.theme);
+    this.styles = styleConstructor(props.theme);
   }
 
   shouldComponentUpdate(nextProps) {
     const r1 = this.props.item;
     const r2 = nextProps.item;
     let changed = true;
-
     if (!r1 && !r2) {
       changed = false;
     } else if (r1 && r2) {
@@ -58,28 +44,24 @@ class Reservation extends Component {
     if (_.isFunction(this.props.renderDay)) {
       return this.props.renderDay(date ? xdateToData(date) : undefined, item);
     }
-
-    const today = dateutils.sameDate(date, XDate()) ? this.style.today : undefined;
+    const today = dateutils.sameDate(date, XDate()) ? this.styles.today : undefined;
     if (date) {
       return (
-        <View style={this.style.day} testID={RESERVATION_DATE}>
-          <Text allowFontScaling={false} style={[this.style.dayNum, today]}>
-            {date.getDate()}
-          </Text>
-          <Text allowFontScaling={false} style={[this.style.dayText, today]}>
-            {XDate.locales[XDate.defaultLocale].dayNamesShort[date.getDay()]}
-          </Text>
+        <View style={this.styles.day} testID={RESERVATION_DATE}>
+          <Text allowFontScaling={false} style={[this.styles.dayNum, today]}>{date.getDate()}</Text>
+          <Text allowFontScaling={false} style={[this.styles.dayText, today]}>{XDate.locales[XDate.defaultLocale].dayNamesShort[date.getDay()]}</Text>
         </View>
       );
     } else {
-      return <View style={this.style.day} />;
+      return (
+        <View style={this.styles.day}/>
+      );
     }
   }
 
   render() {
     const {reservation, date} = this.props.item;
     let content;
-
     if (reservation) {
       const firstItem = date ? true : false;
       if (_.isFunction(this.props.renderItem)) {
@@ -88,11 +70,12 @@ class Reservation extends Component {
     } else if (_.isFunction(this.props.renderEmptyDate)) {
       content = this.props.renderEmptyDate(date);
     }
-
     return (
-      <View style={this.style.container}>
+      <View style={this.styles.container}>
         {this.renderDate(date, reservation)}
-        <View style={this.style.innerContainer}>{content}</View>
+        <View style={{flex: 1}}>
+          {content}
+        </View>
       </View>
     );
   }
diff --git a/node_modules/react-native-calendars/src/agenda/reservation-list/style.js b/node_modules/react-native-calendars/src/agenda/reservation-list/style.js
index d914973..8bd7bb4 100644
--- a/node_modules/react-native-calendars/src/agenda/reservation-list/style.js
+++ b/node_modules/react-native-calendars/src/agenda/reservation-list/style.js
@@ -5,13 +5,10 @@ const STYLESHEET_ID = 'stylesheet.agenda.list';
 
 export default function styleConstructor(theme = {}) {
   const appStyle = {...defaultStyle, ...theme};
-  return StyleSheet.create({
+  return  StyleSheet.create({
     container: {
       flexDirection: 'row'
     },
-    innerContainer: {
-      flex: 1
-    },
     dayNum: {
       fontSize: 28,
       fontWeight: '200',
@@ -35,9 +32,6 @@ export default function styleConstructor(theme = {}) {
     today: {
       color: appStyle.agendaTodayColor
     },
-    indicator: {
-      marginTop: 80
-    },
     ...(theme[STYLESHEET_ID] || {})
   });
 }
diff --git a/node_modules/react-native-calendars/src/agenda/style.js b/node_modules/react-native-calendars/src/agenda/style.js
index 7b81b2e..004c3b8 100644
--- a/node_modules/react-native-calendars/src/agenda/style.js
+++ b/node_modules/react-native-calendars/src/agenda/style.js
@@ -2,6 +2,7 @@ import {StyleSheet} from 'react-native';
 import * as defaultStyle from '../style';
 import platformStyles from './platform-style';
 
+
 const STYLESHEET_ID = 'stylesheet.agenda.main';
 
 export default function styleConstructor(theme = {}) {
@@ -14,9 +15,9 @@ export default function styleConstructor(theme = {}) {
     header: {
       overflow: 'hidden',
       justifyContent: 'flex-end',
-      position: 'absolute',
-      height: '100%',
-      width: '100%'
+      position:'absolute',
+      height:'100%',
+      width:'100%'
     },
     knobContainer: {
       flex: 1,
diff --git a/node_modules/react-native-calendars/src/calendar-list/index.js b/node_modules/react-native-calendars/src/calendar-list/index.js
index d757837..5c3b5de 100644
--- a/node_modules/react-native-calendars/src/calendar-list/index.js
+++ b/node_modules/react-native-calendars/src/calendar-list/index.js
@@ -1,16 +1,16 @@
-import _ from 'lodash';
+import React, {Component} from 'react';
+import {FlatList, Platform, Dimensions, ActivityIndicator, View} from 'react-native';
 import PropTypes from 'prop-types';
 import XDate from 'xdate';
-import React, {Component} from 'react';
-import {FlatList, Platform, Dimensions, View} from 'react-native';
-import {extractComponentProps} from '../component-updater';
+
 import {xdateToData, parseDate} from '../interface';
-import dateutils from '../dateutils';
-import {STATIC_HEADER} from '../testIDs';
 import styleConstructor from './style';
+import dateutils from '../dateutils';
 import Calendar from '../calendar';
 import CalendarListItem from './item';
 import CalendarHeader from '../calendar/header/index';
+import {STATIC_HEADER} from '../testIDs';
+
 
 const {width} = Dimensions.get('window');
 
@@ -30,47 +30,42 @@ class CalendarList extends Component {
     pastScrollRange: PropTypes.number,
     /** Max amount of months allowed to scroll to the future. Default = 50 */
     futureScrollRange: PropTypes.number,
-    /** Used when calendar scroll is horizontal, default is device width, pagination should be disabled */
-    calendarWidth: PropTypes.number,
-    /** Dynamic calendar height */
-    calendarHeight: PropTypes.number,
-    /** Style for the List item (the calendar) */
-    calendarStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),
-    /** Whether to use static header that will not scroll with the list (horizontal only) */
-    staticHeader: PropTypes.bool,
-    /** Enable or disable vertical / horizontal scroll indicator. Default = false */
-    showScrollIndicator: PropTypes.bool,
-
     /** Enable or disable scrolling of calendar list */
     scrollEnabled: PropTypes.bool,
+    /** Enable or disable vertical scroll indicator. Default = false */
+    showScrollIndicator: PropTypes.bool,
     /** When true, the calendar list scrolls to top when the status bar is tapped. Default = true */
     scrollsToTop: PropTypes.bool,
     /** Enable or disable paging on scroll */
     pagingEnabled: PropTypes.bool,
     /** Whether the scroll is horizontal */
     horizontal: PropTypes.bool,
+    /** Used when calendar scroll is horizontal, default is device width, pagination should be disabled */
+    calendarWidth: PropTypes.number,
+    /** Dynamic calendar height */
+    calendarHeight: PropTypes.number,
     /** Should Keyboard persist taps */
     keyboardShouldPersistTaps: PropTypes.oneOf(['never', 'always', 'handled']),
+    /** Style for the List item (the calendar) */
+    calendarStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),
+    /** Whether to use static header that will not scroll with the list (horizontal only) */
+    staticHeader: PropTypes.bool,
     /** A custom key extractor for the generated calendar months */
-    keyExtractor: PropTypes.func,
-    /** How far from the end to trigger the onEndReached callback */
-    onEndReachedThreshold: PropTypes.number,
-    /** Called once when the scroll position gets within onEndReachedThreshold */
-    onEndReached: PropTypes.func
-  };
+    keyExtractor: PropTypes.func
+  }
 
   static defaultProps = {
+    horizontal: false,
     calendarWidth: width,
     calendarHeight: 360,
     pastScrollRange: 50,
     futureScrollRange: 50,
     showScrollIndicator: false,
-    horizontal: false,
-    scrollsToTop: false,
     scrollEnabled: true,
+    scrollsToTop: false,
     removeClippedSubviews: Platform.OS === 'android',
     keyExtractor: (item, index) => String(index)
-  };
+  }
 
   constructor(props) {
     super(props);
@@ -85,18 +80,15 @@ class CalendarList extends Component {
     const texts = [];
     const date = parseDate(props.current) || XDate();
 
-    for (let i = 0; i <= props.pastScrollRange + props.futureScrollRange; i++) {
-      const rangeDate = date.clone().addMonths(i - props.pastScrollRange, true);
+    for (let i = 0; i <= this.props.pastScrollRange + this.props.futureScrollRange; i++) {
+      const rangeDate = date.clone().addMonths(i - this.props.pastScrollRange, true);
       const rangeDateStr = rangeDate.toString('MMM yyyy');
       texts.push(rangeDateStr);
       /*
        * This selects range around current shown month [-0, +2] or [-1, +1] month for detail calendar rendering.
        * If `this.pastScrollRange` is `undefined` it's equal to `false` or 0 in next condition.
        */
-      if (
-        (props.pastScrollRange - 1 <= i && i <= props.pastScrollRange + 1) ||
-        (!props.pastScrollRange && i <= props.pastScrollRange + 2)
-      ) {
+      if (this.props.pastScrollRange - 1 <= i && i <= this.props.pastScrollRange + 1 || !this.props.pastScrollRange && i <= this.props.pastScrollRange + 2) {
         rows.push(rangeDate);
       } else {
         rows.push(rangeDateStr);
@@ -109,42 +101,28 @@ class CalendarList extends Component {
       openDate: date,
       currentMonth: parseDate(props.current)
     };
-  }
-
-  componentDidUpdate(prevProps) {
-    const prevCurrent = parseDate(prevProps.current);
-    const current = parseDate(this.props.current);
 
-    if (current && prevCurrent && current.getTime() !== prevCurrent.getTime()) {
-      this.scrollToMonth(current);
-    }
+    this.onViewableItemsChangedBound = this.onViewableItemsChanged.bind(this);
+    this.renderCalendarBound = this.renderCalendar.bind(this);
+    this.getItemLayout = this.getItemLayout.bind(this);
+    this.onLayout = this.onLayout.bind(this);
   }
 
-  static getDerivedStateFromProps(nextProps, prevState) {
-    const rowclone = prevState.rows;
-    const newrows = [];
-
-    for (let i = 0; i < rowclone.length; i++) {
-      let val = prevState.texts[i];
-      if (rowclone[i].getTime) {
-        val = rowclone[i].clone();
-        val.propbump = rowclone[i].propbump ? rowclone[i].propbump + 1 : 1;
-      }
-      newrows.push(val);
+  onLayout(event) {
+    if (this.props.onLayout) {
+      this.props.onLayout(event);
     }
-    return {rows: newrows};
   }
 
   scrollToDay(d, offset, animated) {
-    const {horizontal, calendarHeight, calendarWidth, pastScrollRange, firstDay} = this.props;
     const day = parseDate(d);
     const diffMonths = Math.round(this.state.openDate.clone().setDate(1).diffMonths(day.clone().setDate(1)));
-    const size = horizontal ? calendarWidth : calendarHeight;
-    let scrollAmount = size * pastScrollRange + diffMonths * size + (offset || 0);
+    const size = this.props.horizontal ? this.props.calendarWidth : this.props.calendarHeight;
+    let scrollAmount = (size * this.props.pastScrollRange) + (diffMonths * size) + (offset || 0);
 
-    if (!horizontal) {
+    if (!this.props.horizontal) {
       let week = 0;
-      const days = dateutils.page(day, firstDay);
+      const days = dateutils.page(day, this.props.firstDay);
       for (let i = 0; i < days.length; i++) {
         week = Math.floor(i / 7);
         if (dateutils.sameDate(days[i], day)) {
@@ -156,59 +134,41 @@ class CalendarList extends Component {
     this.listView.scrollToOffset({offset: scrollAmount, animated});
   }
 
-  scrollToMonth = m => {
-    const {horizontal, calendarHeight, calendarWidth, pastScrollRange} = this.props;
+  scrollToMonth(m) {
     const month = parseDate(m);
     const scrollTo = month || this.state.openDate;
     let diffMonths = Math.round(this.state.openDate.clone().setDate(1).diffMonths(scrollTo.clone().setDate(1)));
-    const size = horizontal ? calendarWidth : calendarHeight;
-    const scrollAmount = size * pastScrollRange + diffMonths * size;
+    const size = this.props.horizontal ? this.props.calendarWidth : this.props.calendarHeight;
+    const scrollAmount = (size * this.props.pastScrollRange) + (diffMonths * size);
 
     this.listView.scrollToOffset({offset: scrollAmount, animated: false});
-  };
-
-  getItemLayout = (data, index) => {
-    const {horizontal, calendarHeight, calendarWidth} = this.props;
-
-    return {
-      length: horizontal ? calendarWidth : calendarHeight,
-      offset: (horizontal ? calendarWidth : calendarHeight) * index,
-      index
-    };
-  };
-
-  getMonthIndex(month) {
-    let diffMonths = this.state.openDate.diffMonths(month) + this.props.pastScrollRange;
-    return diffMonths;
   }
 
-  addMonth = count => {
-    this.updateMonth(this.state.currentMonth.clone().addMonths(count, true));
-  };
+  UNSAFE_componentWillReceiveProps(props) {
+    const current = parseDate(this.props.current);
+    const nextCurrent = parseDate(props.current);
 
-  updateMonth(day, doNotTriggerListeners) {
-    if (day.toString('yyyy MM') === this.state.currentMonth.toString('yyyy MM')) {
-      return;
+    if (nextCurrent && current && nextCurrent.getTime() !== current.getTime()) {
+      this.scrollToMonth(nextCurrent);
     }
 
-    this.setState(
-      {
-        currentMonth: day.clone()
-      },
-      () => {
-        this.scrollToMonth(this.state.currentMonth);
-
-        if (!doNotTriggerListeners) {
-          const currMont = this.state.currentMonth.clone();
+    const rowclone = this.state.rows;
+    const newrows = [];
 
-          _.invoke(this.props, 'onMonthChange', xdateToData(currMont));
-          _.invoke(this.props, 'onVisibleMonthsChange', [xdateToData(currMont)]);
-        }
+    for (let i = 0; i < rowclone.length; i++) {
+      let val = this.state.texts[i];
+      if (rowclone[i].getTime) {
+        val = rowclone[i].clone();
+        val.propbump = rowclone[i].propbump ? rowclone[i].propbump + 1 : 1;
       }
-    );
+      newrows.push(val);
+    }
+    this.setState({
+      rows: newrows
+    });
   }
 
-  onViewableItemsChanged = ({viewableItems}) => {
+  onViewableItemsChanged({viewableItems}) {
     function rowIsCloseToViewable(index, distance) {
       for (let i = 0; i < viewableItems.length; i++) {
         if (Math.abs(index - parseInt(viewableItems[i].index)) <= distance) {
@@ -237,42 +197,94 @@ class CalendarList extends Component {
       }
     }
 
-    _.invoke(this.props, 'onVisibleMonthsChange', visibleMonths);
+    if (this.props.onVisibleMonthsChange) {
+      this.props.onVisibleMonthsChange(visibleMonths);
+    }
 
     this.setState({
       rows: newrows,
       currentMonth: parseDate(visibleMonths[0])
     });
-  };
-
-  renderItem = ({item}) => {
-    const {calendarStyle, horizontal, calendarWidth, testID, ...others} = this.props;
+  }
 
+  renderCalendar({item}) {
     return (
       <CalendarListItem
-        {...others}
+        testID={`${this.props.testID}_${item}`}
+        scrollToMonth={this.scrollToMonth.bind(this)}
         item={item}
-        testID={`${testID}_${item}`}
-        style={calendarStyle}
-        calendarWidth={horizontal ? calendarWidth : undefined}
-        scrollToMonth={this.scrollToMonth}
+        calendarHeight={this.props.calendarHeight}
+        calendarWidth={this.props.horizontal ? this.props.calendarWidth : undefined}
+        {...this.props}
+        style={this.props.calendarStyle}
       />
     );
-  };
+  }
+
+  getItemLayout(data, index) {
+    return {
+      length: this.props.horizontal ? this.props.calendarWidth : this.props.calendarHeight,
+      offset: (this.props.horizontal ? this.props.calendarWidth : this.props.calendarHeight) * index, index
+    };
+  }
+
+  getMonthIndex(month) {
+    let diffMonths = this.state.openDate.diffMonths(month) + this.props.pastScrollRange;
+    return diffMonths;
+  }
+
+  addMonth = (count) => {
+    this.updateMonth(this.state.currentMonth.clone().addMonths(count, true));
+  }
+
+  updateMonth(day, doNotTriggerListeners) {
+    if (day.toString('yyyy MM') === this.state.currentMonth.toString('yyyy MM')) {
+      return;
+    }
+
+    this.setState({
+      currentMonth: day.clone()
+    }, () => {
+      this.scrollToMonth(this.state.currentMonth);
+
+      if (!doNotTriggerListeners) {
+        const currMont = this.state.currentMonth.clone();
+        if (this.props.onMonthChange) {
+          this.props.onMonthChange(xdateToData(currMont));
+        }
+        if (this.props.onVisibleMonthsChange) {
+          this.props.onVisibleMonthsChange([xdateToData(currMont)]);
+        }
+      }
+    });
+  }
 
   renderStaticHeader() {
-    const {staticHeader, horizontal, headerStyle} = this.props;
+    const {staticHeader, horizontal} = this.props;
     const useStaticHeader = staticHeader && horizontal;
-    const headerProps = extractComponentProps(CalendarHeader, this.props);
 
     if (useStaticHeader) {
+      let indicator;
+      if (this.props.showIndicator) {
+        indicator = <ActivityIndicator color={this.props.theme && this.props.theme.indicatorColor}/>;
+      }
+
       return (
         <CalendarHeader
-          {...headerProps}
-          testID={STATIC_HEADER}
-          style={[this.style.staticHeader, headerStyle]}
+          style={[this.style.staticHeader, this.props.headerStyle]}
           month={this.state.currentMonth}
           addMonth={this.addMonth}
+          showIndicator={indicator}
+          theme={this.props.theme}
+          hideArrows={this.props.hideArrows}
+          firstDay={this.props.firstDay}
+          renderArrow={this.props.renderArrow}
+          monthFormat={this.props.monthFormat}
+          hideDayNames={this.props.hideDayNames}
+          weekNumbers={this.props.showWeekNumbers}
+          onPressArrowLeft={this.props.onPressArrowLeft}
+          onPressArrowRight={this.props.onPressArrowRight}
+          testID={STATIC_HEADER}
           accessibilityElementsHidden={true} // iOS
           importantForAccessibility={'no-hide-descendants'} // Android
         />
@@ -281,33 +293,35 @@ class CalendarList extends Component {
   }
 
   render() {
-    const {style, pastScrollRange, futureScrollRange, horizontal, showScrollIndicator, testID} = this.props;
-
     return (
       <View>
         <FlatList
-          ref={c => (this.listView = c)}
-          style={[this.style.container, style]}
-          initialListSize={pastScrollRange + futureScrollRange + 1} // ListView deprecated
+          testID={this.props.testID}
+          onLayout={this.onLayout}
+          ref={(c) => this.listView = c}
+          //scrollEventThrottle={1000}
+          style={[this.style.container, this.props.style]}
+          initialListSize={this.props.pastScrollRange + this.props.futureScrollRange + 1} // ListView deprecated
           data={this.state.rows}
-          renderItem={this.renderItem}
-          getItemLayout={this.getItemLayout}
-          onViewableItemsChanged={this.onViewableItemsChanged}
-          viewabilityConfig={this.viewabilityConfig}
-          initialScrollIndex={this.state.openDate ? this.getMonthIndex(this.state.openDate) : false}
-          showsVerticalScrollIndicator={showScrollIndicator}
-          showsHorizontalScrollIndicator={horizontal && showScrollIndicator}
-          testID={testID}
-          onLayout={this.props.onLayout}
+          //snapToAlignment='start'
+          //snapToInterval={this.calendarHeight}
           removeClippedSubviews={this.props.removeClippedSubviews}
+          pageSize={1} // ListView deprecated
+          horizontal={this.props.horizontal}
           pagingEnabled={this.props.pagingEnabled}
+          onViewableItemsChanged={this.onViewableItemsChangedBound}
+          viewabilityConfig={this.viewabilityConfig}
+          renderItem={this.renderCalendarBound}
+          showsVerticalScrollIndicator={this.props.showScrollIndicator}
+          showsHorizontalScrollIndicator={this.props.showScrollIndicator}
           scrollEnabled={this.props.scrollEnabled}
-          scrollsToTop={this.props.scrollsToTop}
-          horizontal={this.props.horizontal}
-          keyboardShouldPersistTaps={this.props.keyboardShouldPersistTaps}
           keyExtractor={this.props.keyExtractor}
+          initialScrollIndex={this.state.openDate ? this.getMonthIndex(this.state.openDate) : false}
+          getItemLayout={this.getItemLayout}
+          scrollsToTop={this.props.scrollsToTop}
           onEndReachedThreshold={this.props.onEndReachedThreshold}
           onEndReached={this.props.onEndReached}
+          keyboardShouldPersistTaps={this.props.keyboardShouldPersistTaps}
         />
         {this.renderStaticHeader()}
       </View>
diff --git a/node_modules/react-native-calendars/src/calendar-list/item.js b/node_modules/react-native-calendars/src/calendar-list/item.js
index db99a86..e78b07f 100644
--- a/node_modules/react-native-calendars/src/calendar-list/item.js
+++ b/node_modules/react-native-calendars/src/calendar-list/item.js
@@ -1,21 +1,12 @@
-import PropTypes from 'prop-types';
 import React, {Component} from 'react';
 import {Text, View} from 'react-native';
-import {extractComponentProps} from '../component-updater';
 import Calendar from '../calendar';
 import styleConstructor from './style';
 
+
 class CalendarListItem extends Component {
   static displayName = 'IGNORE';
 
-  static propTypes = {
-    ...Calendar.propTypes,
-    item: PropTypes.any,
-    calendarWidth: PropTypes.number,
-    calendarHeight: PropTypes.number,
-    horizontal: PropTypes.bool
-  };
-
   static defaultProps = {
     hideArrows: true,
     hideExtraDays: true
@@ -30,17 +21,15 @@ class CalendarListItem extends Component {
   shouldComponentUpdate(nextProps) {
     const r1 = this.props.item;
     const r2 = nextProps.item;
-
     return r1.toString('yyyy MM') !== r2.toString('yyyy MM') || !!(r2.propbump && r2.propbump !== r1.propbump);
   }
 
   onPressArrowLeft = (_, month) => {
-    const {onPressArrowLeft, scrollToMonth} = this.props;
     const monthClone = month.clone();
 
-    if (onPressArrowLeft) {
-      onPressArrowLeft(_, monthClone);
-    } else if (scrollToMonth) {
+    if (this.props.onPressArrowLeft) {
+      this.props.onPressArrowLeft(_, monthClone);
+    } else if (this.props.scrollToMonth) {
       const currentMonth = monthClone.getMonth();
       monthClone.addMonths(-1);
 
@@ -49,57 +38,64 @@ class CalendarListItem extends Component {
         monthClone.setDate(monthClone.getDate() - 1);
       }
 
-      scrollToMonth(monthClone);
+      this.props.scrollToMonth(monthClone);
     }
-  };
+  }
 
   onPressArrowRight = (_, month) => {
-    const {onPressArrowRight, scrollToMonth} = this.props;
     const monthClone = month.clone();
 
-    if (onPressArrowRight) {
-      onPressArrowRight(_, monthClone);
-    } else if (scrollToMonth) {
+    if (this.props.onPressArrowRight) {
+      this.props.onPressArrowRight(_, monthClone);
+    } else if (this.props.scrollToMonth) {
       monthClone.addMonths(1);
-      scrollToMonth(monthClone);
+      this.props.scrollToMonth(monthClone);
     }
-  };
+  }
 
   render() {
-    const {
-      item,
-      horizontal,
-      calendarHeight,
-      calendarWidth,
-      testID,
-      style,
-      headerStyle,
-      onPressArrowLeft,
-      onPressArrowRight
-    } = this.props;
-    const calendarProps = extractComponentProps(Calendar, this.props);
-
-    if (item.getTime) {
+    const row = this.props.item;
+
+    if (row.getTime) {
       return (
         <Calendar
-          {...calendarProps}
-          testID={testID}
-          current={item}
-          style={[{height: calendarHeight, width: calendarWidth}, this.style.calendar, style]}
-          headerStyle={horizontal ? headerStyle : undefined}
+          testID={`${this.props.testID}_${row}`}
+          theme={this.props.theme}
+          style={[{height: this.props.calendarHeight, width: this.props.calendarWidth}, this.style.calendar, this.props.style]}
+          current={row}
+          hideArrows={this.props.hideArrows}
+          hideExtraDays={this.props.hideExtraDays}
           disableMonthChange
-          onPressArrowLeft={horizontal ? this.onPressArrowLeft : onPressArrowLeft}
-          onPressArrowRight={horizontal ? this.onPressArrowRight : onPressArrowRight}
+          markedDates={this.props.markedDates}
+          markingType={this.props.markingType}
+          hideDayNames={this.props.hideDayNames}
+          onDayPress={this.props.onDayPress}
+          onDayLongPress={this.props.onDayLongPress}
+          displayLoadingIndicator={this.props.displayLoadingIndicator}
+          minDate={this.props.minDate}
+          maxDate={this.props.maxDate}
+          firstDay={this.props.firstDay}
+          monthFormat={this.props.monthFormat}
+          dayComponent={this.props.dayComponent}
+          disabledByDefault={this.props.disabledByDefault}
+          showWeekNumbers={this.props.showWeekNumbers}
+          renderArrow={this.props.renderArrow}
+          onPressArrowLeft={this.props.horizontal ? this.onPressArrowLeft : this.props.onPressArrowLeft}
+          onPressArrowRight={this.props.horizontal ? this.onPressArrowRight : this.props.onPressArrowRight}
+          headerStyle={this.props.horizontal ? this.props.headerStyle : undefined}
+          accessibilityElementsHidden={this.props.accessibilityElementsHidden} // iOS
+          importantForAccessibility={this.props.importantForAccessibility} // Android
+          customHeader={this.props.customHeader}
+          renderHeader={this.props.renderHeader}
+          disableAllTouchEventsForDisabledDays={this.props.disableAllTouchEventsForDisabledDays}
         />
       );
     } else {
-      const text = item.toString();
+      const text = row.toString();
 
       return (
-        <View style={[{height: calendarHeight, width: calendarWidth}, this.style.placeholder]}>
-          <Text allowFontScaling={false} style={this.style.placeholderText}>
-            {text}
-          </Text>
+        <View style={[{height: this.props.calendarHeight, width: this.props.calendarWidth}, this.style.placeholder]}>
+          <Text allowFontScaling={false} style={this.style.placeholderText}>{text}</Text>
         </View>
       );
     }
diff --git a/node_modules/react-native-calendars/src/calendar-list/style.js b/node_modules/react-native-calendars/src/calendar-list/style.js
index 000abdc..69a8e5b 100644
--- a/node_modules/react-native-calendars/src/calendar-list/style.js
+++ b/node_modules/react-native-calendars/src/calendar-list/style.js
@@ -3,7 +3,7 @@ import * as defaultStyle from '../style';
 
 const STYLESHEET_ID = 'stylesheet.calendar-list.main';
 
-export default function getStyle(theme = {}) {
+export default function getStyle(theme={}) {
   const appStyle = {...defaultStyle, ...theme};
   return StyleSheet.create({
     container: {
diff --git a/node_modules/react-native-calendars/src/calendar/day/basic/index.js b/node_modules/react-native-calendars/src/calendar/day/basic/index.js
index c499346..fbf31ca 100644
--- a/node_modules/react-native-calendars/src/calendar/day/basic/index.js
+++ b/node_modules/react-native-calendars/src/calendar/day/basic/index.js
@@ -1,207 +1,120 @@
-import _ from 'lodash';
+import React, {Component} from 'react';
+import {TouchableOpacity, Text} from 'react-native';
 import PropTypes from 'prop-types';
-import React, {Component, Fragment} from 'react';
-import {TouchableOpacity, Text, View} from 'react-native';
 import {shouldUpdate} from '../../../component-updater';
+import Dot from '../../dot';
 import styleConstructor from './style';
-import Marking from '../marking';
 
 
-export default class BasicDay extends Component {
+class Day extends Component {
   static displayName = 'IGNORE';
 
   static propTypes = {
-    state: PropTypes.oneOf(['disabled', 'today', '']), //TODO: deprecate
-    /** The marking object */
-    marking: PropTypes.any,
-    /** Date marking style [simple/period/multi-dot/multi-period]. Default = 'simple' */
-    markingType: PropTypes.oneOf(_.values(Marking.markingTypes)),
-    /** Theme object */
+    // TODO: disabled props should be removed
+    state: PropTypes.oneOf(['disabled', 'today', '']),
+    // Specify theme properties to override specific styles for calendar parts. Default = {}
     theme: PropTypes.object,
-    /** onPress callback */
+    marking: PropTypes.any,
     onPress: PropTypes.func,
-    /** onLongPress callback */
     onLongPress: PropTypes.func,
-    /** The date to return from press callbacks */
     date: PropTypes.object,
-    /** Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates*/
     disableAllTouchEventsForDisabledDays: PropTypes.bool
   };
 
   constructor(props) {
     super(props);
-    
     this.style = styleConstructor(props.theme);
-  }
 
-  shouldComponentUpdate(nextProps) {
-    return shouldUpdate(this.props, nextProps, ['children', 'state', 'markingType', 'marking', 'onPress', 'onLongPress', 'date']);
+    this.onDayPress = this.onDayPress.bind(this);
+    this.onDayLongPress = this.onDayLongPress.bind(this);
   }
 
-  onPress = () => {
-    _.invoke(this.props, 'onPress', this.props.date);
+  onDayPress() {
+    this.props.onPress(this.props.date);
+  }
+  onDayLongPress() {
+    this.props.onLongPress(this.props.date);
   }
 
-  onLongPress = () => {
-    _.invoke(this.props, 'onLongPress', this.props.date);
+  shouldComponentUpdate(nextProps) {
+    return shouldUpdate(this.props, nextProps, ['state', 'children', 'marking', 'onPress', 'onLongPress']);
   }
 
-  get marking() {
+  render() {
+    const {theme, disableAllTouchEventsForDisabledDays} = this.props;
+    const containerStyle = [this.style.base];
+    const textStyle = [this.style.text];
+
     let marking = this.props.marking || {};
     if (marking && marking.constructor === Array && marking.length) {
       marking = {
         marking: true
       };
     }
-    return marking;
-  }
-
-  shouldDisableTouchEvent() {
-    const {disableAllTouchEventsForDisabledDays} = this.props;
-    const {disableTouchEvent} = this.marking;
-    let disableTouch = false;
-
-    if (typeof disableTouchEvent === 'boolean') {
-      disableTouch = disableTouchEvent;
-    } else if (typeof disableAllTouchEventsForDisabledDays === 'boolean' && this.isDisabled()) {
-      disableTouch = disableAllTouchEventsForDisabledDays;
-    }
-    return disableTouch;
-  }
 
-  isDisabled() {
-    return typeof this.marking.disabled !== 'undefined' ? this.marking.disabled : this.props.state === 'disabled';
-  }
-
-  isToday() {
-    return this.props.state === 'today';
-  }
-
-  isMultiDot() {
-    return this.props.markingType === Marking.markingTypes.multiDot;
-  }
-
-  isMultiPeriod() {
-    return this.props.markingType === Marking.markingTypes.multiPeriod;
-  }
+    const isDisabled = typeof marking.disabled !== 'undefined' ? marking.disabled : this.props.state === 'disabled';
+    const isToday = this.props.state === 'today';
 
-  isCustom() {
-    return this.props.markingType === Marking.markingTypes.custom;
-  }
-
-  getContainerStyle() {
-    const {customStyles, selected, selectedColor} = this.props.marking;
-    const style = [this.style.base];
+    const {
+      marked,
+      dotColor,
+      selected,
+      selectedColor,
+      selectedTextColor,
+      activeOpacity,
+      disableTouchEvent
+    } = marking;
 
     if (selected) {
-      style.push(this.style.selected);
-      if (selectedColor) {
-        style.push({backgroundColor: selectedColor});
-      }
-    } else if (this.isToday()) {
-      style.push(this.style.today);
-    }
+      containerStyle.push(this.style.selected);
+      textStyle.push(this.style.selectedText);
 
-    //Custom marking type
-    if (this.isCustom() && customStyles && customStyles.container) {
-      if (customStyles.container.borderRadius === undefined) {
-        customStyles.container.borderRadius = 16;
+      if (selectedColor) {
+        containerStyle.push({backgroundColor: selectedColor});
       }
-      style.push(customStyles.container);
-    }
 
-    return style;
-  }
-
-  getTextStyle() {
-    const {customStyles, selected, selectedTextColor} = this.props.marking;
-    const style = [this.style.text];
-
-    if (selected) {
-      style.push(this.style.selectedText);
       if (selectedTextColor) {
-        style.push({color: selectedTextColor});
+        textStyle.push({color: selectedTextColor});
       }
-    } else if (this.isDisabled()) {
-      style.push(this.style.disabledText);
-    } else if (this.isToday()) {
-      style.push(this.style.todayText);
-    }
 
-    //Custom marking type
-    if (this.isCustom() && customStyles && customStyles.text) {
-      style.push(customStyles.text);
+    } else if (isDisabled) {
+      textStyle.push(this.style.disabledText);
+    } else if (isToday) {
+      containerStyle.push(this.style.today);
+      textStyle.push(this.style.todayText);
     }
 
-    return style;
-  }
-
-  renderMarking() {
-    const {theme, markingType} = this.props;
-    const {selected, marked, dotColor, dots, periods} = this.marking;
-
-    return (
-      <Marking
-        type={markingType}
-        theme={theme}
-        marked={this.isMultiDot() ? true : marked}
-        selected={selected}
-        disabled={this.isDisabled()}
-        today={this.isToday()}
-        dotColor={dotColor}
-        dots={dots}
-        periods={periods}
-      />
-    );
-  }
-
-  renderText() {
-    return (
-      <Text allowFontScaling={false} style={this.getTextStyle()}>
-        {String(this.props.children)}
-      </Text>
-    );
-  }
-
-  renderContent() {
-    return (
-      <Fragment>
-        {this.renderText()}
-        {this.renderMarking()}
-      </Fragment>
-    );
-  }
-
-  renderContainer() {
-    const {activeOpacity} = this.marking;
+    let shouldDisableTouchEvent = false;
+    if (typeof disableTouchEvent === 'boolean') {
+      shouldDisableTouchEvent = disableTouchEvent;
+    } else if (typeof disableAllTouchEventsForDisabledDays === 'boolean' && isDisabled) {
+      shouldDisableTouchEvent = disableAllTouchEventsForDisabledDays;
+    }
 
     return (
       <TouchableOpacity
         testID={this.props.testID}
-        style={this.getContainerStyle()}
-        disabled={this.shouldDisableTouchEvent()}
+        style={containerStyle}
+        onPress={this.onDayPress}
+        onLongPress={this.onDayLongPress}
         activeOpacity={activeOpacity}
-        onPress={!this.shouldDisableTouchEvent() ? this.onPress : undefined}
-        onLongPress={!this.shouldDisableTouchEvent() ? this.onLongPress : undefined}
-        accessible
-        accessibilityRole={this.isDisabled() ? undefined : 'button'}
+        disabled={shouldDisableTouchEvent}
+        accessibilityRole={isDisabled ? undefined : 'button'}
         accessibilityLabel={this.props.accessibilityLabel}
       >
-        {this.isMultiPeriod() ? this.renderText() : this.renderContent()}
+        <Text allowFontScaling={false} style={textStyle}>{String(this.props.children)}</Text>
+        <Text>ssss</Text>
+        <Dot
+          theme={theme}
+          isMarked={marked}
+          dotColor={dotColor}
+          isSelected={selected}
+          isToday={isToday}
+          isDisabled={isDisabled}
+        />
       </TouchableOpacity>
     );
   }
-
-  renderPeriodsContainer() {
-    return (
-      <View style={this.style.container}>
-        {this.renderContainer()}
-        {this.renderMarking()}
-      </View>
-    );
-  }
-
-  render() {
-    return this.isMultiPeriod() ? this.renderPeriodsContainer() : this.renderContainer();
-  }
 }
+
+export default Day;
diff --git a/node_modules/react-native-calendars/src/calendar/day/basic/style.js b/node_modules/react-native-calendars/src/calendar/day/basic/style.js
index 5dd12db..db82b93 100644
--- a/node_modules/react-native-calendars/src/calendar/day/basic/style.js
+++ b/node_modules/react-native-calendars/src/calendar/day/basic/style.js
@@ -3,13 +3,9 @@ import * as defaultStyle from '../../../style';
 
 const STYLESHEET_ID = 'stylesheet.day.basic';
 
-export default function styleConstructor(theme = {}) {
+export default function styleConstructor(theme={}) {
   const appStyle = {...defaultStyle, ...theme};
   return StyleSheet.create({
-    container: {
-      alignSelf: 'stretch',
-      alignItems: 'center'
-    },
     base: {
       width: 32,
       height: 32,
@@ -29,7 +25,7 @@ export default function styleConstructor(theme = {}) {
     },
     selected: {
       backgroundColor: appStyle.selectedDayBackgroundColor,
-      borderRadius: 16
+      borderRadius: 0
     },
     today: {
       backgroundColor: appStyle.todayBackgroundColor,
diff --git a/node_modules/react-native-calendars/src/calendar/day/custom/index.js b/node_modules/react-native-calendars/src/calendar/day/custom/index.js
new file mode 100644
index 0000000..6eeb1c6
--- /dev/null
+++ b/node_modules/react-native-calendars/src/calendar/day/custom/index.js
@@ -0,0 +1,104 @@
+import React, {Component} from 'react';
+import {TouchableOpacity, Text, View} from 'react-native';
+import PropTypes from 'prop-types';
+
+import styleConstructor from './style';
+import {shouldUpdate} from '../../../component-updater';
+
+
+class Day extends Component {
+  static displayName = 'IGNORE';
+  
+  static propTypes = {
+    // TODO: disabled props should be removed
+    //late, absent, perfect 
+    state: PropTypes.oneOf(['selected', 'disabled', 'today', '']),
+    // Specify theme properties to override specific styles for calendar parts. Default = {}
+    theme: PropTypes.object,
+    marking: PropTypes.any,
+    onPress: PropTypes.func,
+    onLongPress: PropTypes.func,
+    date: PropTypes.object
+  };
+
+  constructor(props) {
+    super(props);
+
+    this.style = styleConstructor(props.theme);
+    this.onDayPress = this.onDayPress.bind(this);
+    this.onDayLongPress = this.onDayLongPress.bind(this);
+  }
+
+  onDayPress() {
+    this.props.onPress(this.props.date);
+  }
+  onDayLongPress() {
+    this.props.onLongPress(this.props.date);
+  }
+
+  shouldComponentUpdate(nextProps) {
+    return shouldUpdate(this.props, nextProps, ['state', 'children', 'marking', 'onPress', 'onLongPress']);
+  }
+
+  render() {
+    let containerStyle = [this.style.base];
+    let textStyle = [this.style.text];
+    
+    let marking = this.props.marking || {};
+    if (marking && marking.constructor === Array && marking.length) {
+      marking = {
+        marking: true
+      };
+    }
+
+    const isDisabled = typeof marking.disabled !== 'undefined' ? marking.disabled : this.props.state === 'disabled';
+    
+    if (marking.selected) {
+      containerStyle.push(this.style.selected);
+      textStyle.push(this.style.selectedText);
+    } else if (isDisabled) {
+      textStyle.push(this.style.disabledText);
+    } else if (this.props.state === 'today') {
+      containerStyle.push(this.style.today);
+      textStyle.push(this.style.todayText);
+    }
+
+    if (marking.customStyles && typeof marking.customStyles === 'object') {
+      const styles = marking.customStyles;
+      if (styles.container) {
+        if (styles.container.borderRadius === undefined) {
+          styles.container.borderRadius = 0;
+        }
+        containerStyle.push(styles.container);
+      }
+      if (styles.text) {
+        textStyle.push(styles.text);
+      }
+    }
+    //CHANGE HERE --> DAY DESIGN
+    //하루의 성취도 따라 색칠이 표시되도록 하는 코드 짜기
+  
+    //setHeight
+    /*json 불러와서 거기 프로세스 값을 day height으로*/
+    return (
+      <View style = {containerStyle}>
+    
+      <TouchableOpacity
+        testID={this.props.testID}
+        onPress={this.onDayPress}
+        onLongPress={this.onDayLongPress}
+        activeOpacity={marking.activeOpacity}
+        disabled={marking.disableTouchEvent}
+        accessibilityRole={isDisabled ? undefined : 'button'}
+        accessibilityLabel={this.props.accessibilityLabel}
+      >
+
+      </TouchableOpacity>
+      <Text allowFontScaling={false} style={textStyle}>{String(this.props.children)}</Text>
+      <Text>{console.log(this.props.children)}</Text>
+      </View>
+    );
+  }
+}
+
+export default Day;
diff --git a/node_modules/react-native-calendars/src/calendar/day/custom/style.js b/node_modules/react-native-calendars/src/calendar/day/custom/style.js
new file mode 100644
index 0000000..6bbaf02
--- /dev/null
+++ b/node_modules/react-native-calendars/src/calendar/day/custom/style.js
@@ -0,0 +1,50 @@
+import {StyleSheet, Platform} from 'react-native';
+import * as defaultStyle from '../../../style';
+
+const STYLESHEET_ID = 'stylesheet.day.single';
+
+export default function styleConstructor(theme={}) {
+  const appStyle = {...defaultStyle, ...theme};
+  return StyleSheet.create({
+    base: {
+      width: 50,
+      height: 50,
+      alignItems: 'center',
+      borderColor: '#5235BB',
+      borderWidth: 1,
+    },
+    text: {
+      //안드로이드에서 확인해보고 안드로이드도 중앙으로 맞춰야함
+      marginTop: Platform.OS === 'android' ? 4 : 14,
+      fontSize: appStyle.textDayFontSize,
+      fontFamily: appStyle.textDayFontFamily,
+      fontWeight: appStyle.textDayFontWeight,
+      color: appStyle.dayTextColor,
+      backgroundColor: 'rgba(255, 255, 255, 0)',
+      position : 'absolute'
+    },
+    alignedText: {
+      //안드로이드에서 확인해보고 안드로이드도 중앙으로 맞춰야함
+      marginTop: Platform.OS === 'android' ? 4 : 14
+    },
+    selected: {
+      backgroundColor: appStyle.selectedDayBackgroundColor,
+    },
+    today: {
+      //backgroundColor: appStyle.todayBackgroundColor,
+      borderColor: '#5235BB',
+      borderWidth: 1,
+    },
+    todayText: {
+      color: appStyle.todayTextColor
+    },
+    selectedText: {
+      color: appStyle.selectedDayTextColor
+    },
+    //late, absent style 추가하기
+    disabledText: {
+      color: appStyle.textDisabledColor
+    },
+    ...(theme[STYLESHEET_ID] || {})
+  });
+}
diff --git a/node_modules/react-native-calendars/src/calendar/day/index.js b/node_modules/react-native-calendars/src/calendar/day/index.js
deleted file mode 100644
index e005388..0000000
--- a/node_modules/react-native-calendars/src/calendar/day/index.js
+++ /dev/null
@@ -1,98 +0,0 @@
-import _ from 'lodash';
-import PropTypes from 'prop-types';
-import XDate from 'xdate';
-import React, {Component} from 'react';
-import {shouldUpdate, extractComponentProps} from '../../component-updater';
-import {xdateToData} from '../../interface';
-import {SELECT_DATE_SLOT} from '../../testIDs';
-import BasicDay from './basic';
-import PeriodDay from './period';
-
-
-const basicDayProps = _.omit(BasicDay.propTypes, 'date');
-
-export default class Day extends Component {
-  static displayName = 'IGNORE';
-
-  static propTypes = {
-    ...basicDayProps,
-    /** The day to render */
-    day: PropTypes.object,
-    /** Provide custom day rendering component */
-    dayComponent: PropTypes.any
-  };
-
-  shouldComponentUpdate(nextProps) {
-    return shouldUpdate(this.props, nextProps, ['day', 'dayComponent', 'markingType', 'marking', 'onPress', 'onLongPress']);
-  }
-
-  getMarkingLabel() {
-    const {marking} = this.props;
-    let label = '';
-
-    if (marking.accessibilityLabel) {
-      return marking.accessibilityLabel;
-    }
-
-    if (marking.selected) {
-      label += 'selected ';
-      if (!marking.marked) {
-        label += 'You have no entries for this day ';
-      }
-    }
-    if (marking.marked) {
-      label += 'You have entries for this day ';
-    }
-    if (marking.startingDay) {
-      label += 'period start ';
-    }
-    if (marking.endingDay) {
-      label += 'period end ';
-    }
-    if (marking.disabled || marking.disableTouchEvent) {
-      label += 'disabled ';
-    }
-    return label;
-  }
-
-  getAccessibilityLabel = (day) => {
-    const {state} = this.props;
-    const today = XDate.locales[XDate.defaultLocale].today;
-    const isToday = state === 'today'; //TODO: check if 'day' equals 'today' and remove 'state' check
-    const formatAccessibilityLabel = XDate.locales[XDate.defaultLocale].formatAccessibilityLabel;
-    const markingLabel = this.getMarkingLabel(day);
-
-    if (formatAccessibilityLabel) {
-      return `${isToday ? today : ''} ${day.toString(formatAccessibilityLabel)} ${markingLabel}`;
-    }
-
-    return `${isToday ? 'today' : ''} ${day.toString('dddd d MMMM yyyy')} ${markingLabel}`;
-  };
-
-  getDayComponent() {
-    const {dayComponent, markingType} = this.props;
-
-    if (dayComponent) {
-      return dayComponent;
-    }
-    return markingType === 'period' ? PeriodDay : BasicDay;
-  }
-
-  render() {
-    const {day} = this.props;
-    const date = xdateToData(day);
-    const Component = this.getDayComponent();
-    const dayProps = extractComponentProps(Component, this.props);
-
-    return (
-      <Component
-          {...dayProps}
-          date={date}
-          testID={`${SELECT_DATE_SLOT}-${date.dateString}`}
-          accessibilityLabel={this.getAccessibilityLabel(day)}
-        >
-          {date ? day.getDate() : day}
-      </Component>
-    );
-  }
-}
diff --git a/node_modules/react-native-calendars/src/calendar/day/marking/index.js b/node_modules/react-native-calendars/src/calendar/day/marking/index.js
deleted file mode 100644
index 3aaf874..0000000
--- a/node_modules/react-native-calendars/src/calendar/day/marking/index.js
+++ /dev/null
@@ -1,153 +0,0 @@
-import PropTypes from 'prop-types';
-import React, {Component} from 'react';
-import {View} from 'react-native';
-import {shouldUpdate, extractComponentProps} from '../../../component-updater';
-import styleConstructor from './style';
-import Dot from '../dot';
-
-
-const MARKING_TYPES = {
-  dot: 'dot',
-  multiDot: 'multi-dot',
-  period: 'period',
-  multiPeriod: 'multi-period',
-  custom: 'custom'
-};
-
-const DOT = {
-  key: PropTypes.string,
-  color: PropTypes.string,
-  selectedDotColor: PropTypes.string
-};
-
-const PERIOD = {
-  startingDay: PropTypes.bool,
-  endingDay: PropTypes.bool,
-  color: PropTypes.string
-};
-
-
-export default class Marking extends Component {
-  static displayName = 'IGNORE';
-
-  static propTypes = {
-    ...Dot.propTypes,
-    type: PropTypes.oneOf(Object.values(MARKING_TYPES)),
-    theme: PropTypes.object,
-    selected: PropTypes.bool,
-    marked: PropTypes.bool,
-    today: PropTypes.bool,
-    disabled: PropTypes.bool,
-    disableTouchEvent: PropTypes.bool,
-    activeOpacity: PropTypes.number,
-    selectedColor: PropTypes.string,
-    selectedTextColor: PropTypes.string,
-    dotColor: PropTypes.string,
-    //multi-dot
-    dots: PropTypes.arrayOf(PropTypes.shape(DOT)),
-    //multi-period
-    periods: PropTypes.arrayOf(PropTypes.shape(PERIOD))
-  };
-
-  static markingTypes = MARKING_TYPES;
-
-  constructor(props) {
-    super(props);
-    
-    this.style = styleConstructor(props.theme);
-  }
-
-  shouldComponentUpdate(nextProps) {
-    return shouldUpdate(this.props, nextProps, [
-      'type', 
-      'selected', 
-      'marked', 
-      'today', 
-      'disabled', 
-      'disableTouchEvent', 
-      'activeOpacity', 
-      'selectedColor', 
-      'selectedTextColor', 
-      'dotColor',
-      'dots',
-      'periods'
-    ]);
-  }
-
-  getItems(items) {
-    const {type} = this.props;
-    
-    if (items && Array.isArray(items) && items.length > 0) {
-      // Filter out items so that we process only those which have color property
-      const validItems = items.filter(d => d && d.color);
-      
-      return validItems.map((item, index) => {
-        return type === MARKING_TYPES.multiDot ? this.renderDot(index, item) : this.renderPeriod(index, item);
-      });
-    }
-  }
-
-  renderMarkingByType() {
-    const {type, dots, periods} = this.props;
-
-    switch (type) {
-      case MARKING_TYPES.multiDot:
-        return this.renderMultiMarkings(this.style.dots, dots); 
-      case MARKING_TYPES.multiPeriod:
-        return this.renderMultiMarkings(this.style.periods, periods);    
-      default:
-        return this.renderDot();
-    }
-  }
-
-  renderMultiMarkings(containerStyle, items) {
-    return (
-      <View style={containerStyle}>
-        {this.getItems(items)}
-      </View>
-    );
-  }
-
-  renderPeriod(index, item) {
-    const {color, startingDay, endingDay} = item;
-    const style = [
-      this.style.period,
-      {
-        backgroundColor: color
-      }
-    ];
-    if (startingDay) {
-      style.push(this.style.startingDay);
-    }
-    if (endingDay) {
-      style.push(this.style.endingDay);
-    }
-    return <View key={index} style={style}/>;
-  }
-
-  renderDot(index, item) {
-    const {selected, dotColor} = this.props;
-    const dotProps = extractComponentProps(Dot, this.props);
-    let key = index;
-    let color = dotColor;
-    
-    if (item) {
-      if (item.key) {
-        key = item.key;
-      }
-      color = selected && item.selectedDotColor ? item.selectedDotColor : item.color;
-    }
-
-    return (
-      <Dot
-        {...dotProps}
-        key={key}
-        color={color}
-      />
-    );
-  }
-
-  render() {
-    return this.renderMarkingByType();
-  }
-}
diff --git a/node_modules/react-native-calendars/src/calendar/day/marking/style.js b/node_modules/react-native-calendars/src/calendar/day/marking/style.js
deleted file mode 100644
index 61cbb0e..0000000
--- a/node_modules/react-native-calendars/src/calendar/day/marking/style.js
+++ /dev/null
@@ -1,32 +0,0 @@
-import {StyleSheet} from 'react-native';
-import * as defaultStyle from '../../style';
-
-const STYLESHEET_ID = 'stylesheet.marking';
-
-export default function styleConstructor(theme = {}) {
-  const appStyle = {...defaultStyle, ...theme};
-  return StyleSheet.create({
-    dots: {
-      flexDirection: 'row'
-    },
-    periods: {
-      alignSelf: 'stretch'
-    },
-    period: {
-      height: 4,
-      marginVertical: 1,
-      backgroundColor: appStyle.dotColor
-    },
-    startingDay: {
-      borderTopLeftRadius: 2,
-      borderBottomLeftRadius: 2,
-      marginLeft: 4
-    },
-    endingDay: {
-      borderTopRightRadius: 2,
-      borderBottomRightRadius: 2,
-      marginRight: 4
-    },
-    ...(theme[STYLESHEET_ID] || {})
-  });
-}
diff --git a/node_modules/react-native-calendars/src/calendar/day/multi-dot/index.js b/node_modules/react-native-calendars/src/calendar/day/multi-dot/index.js
new file mode 100644
index 0000000..424e37a
--- /dev/null
+++ b/node_modules/react-native-calendars/src/calendar/day/multi-dot/index.js
@@ -0,0 +1,97 @@
+import React, {Component} from 'react';
+import {View, TouchableOpacity, Text} from 'react-native';
+import PropTypes from 'prop-types';
+
+import {shouldUpdate} from '../../../component-updater';
+import styleConstructor from './style';
+
+
+class Day extends Component {
+  static displayName = 'IGNORE';
+  
+  static propTypes = {
+    // TODO: disabled props should be removed
+    state: PropTypes.oneOf(['disabled', 'today', '']),
+
+    // Specify theme properties to override specific styles for calendar parts. Default = {}
+    theme: PropTypes.object,
+    marking: PropTypes.any,
+    onPress: PropTypes.func,
+    onLongPress: PropTypes.func,
+    date: PropTypes.object
+  };
+
+  constructor(props) {
+    super(props);
+
+    this.style = styleConstructor(props.theme);
+
+    this.onDayPress = this.onDayPress.bind(this);
+    this.onDayLongPress = this.onDayLongPress.bind(this);
+  }
+
+  onDayPress() {
+    this.props.onPress(this.props.date);
+  }
+
+  onDayLongPress() {
+    this.props.onLongPress(this.props.date);
+  }
+
+  shouldComponentUpdate(nextProps) {
+    return shouldUpdate(this.props, nextProps, ['state', 'children', 'marking', 'onPress', 'onLongPress']);
+  }
+
+  renderDots(marking) {
+    const baseDotStyle = [this.style.dot, this.style.visibleDot];
+    if (marking.dots && Array.isArray(marking.dots) && marking.dots.length > 0) {
+      // Filter out dots so that we we process only those items which have key and color property
+      const validDots = marking.dots.filter(d => (d && d.color));
+      return validDots.map((dot, index) => {
+        return (
+          <View key={dot.key ? dot.key : index} style={[baseDotStyle,
+            {backgroundColor: marking.selected && dot.selectedDotColor ? dot.selectedDotColor : dot.color}]}/>
+        );
+      });
+    }
+    return;
+  }
+
+  render() {
+    const containerStyle = [this.style.base];
+    const textStyle = [this.style.text];
+    const marking = this.props.marking || {};
+    const dot = this.renderDots(marking);
+    const isDisabled = typeof marking.disabled !== 'undefined' ? marking.disabled : this.props.state === 'disabled';
+
+    if (marking.selected) {
+      containerStyle.push(this.style.selected);
+      textStyle.push(this.style.selectedText);
+      if (marking.selectedColor) {
+        containerStyle.push({backgroundColor: marking.selectedColor});
+      }
+    } else if (isDisabled) {
+      textStyle.push(this.style.disabledText);
+    } else if (this.props.state === 'today') {
+      containerStyle.push(this.style.today);
+      textStyle.push(this.style.todayText);
+    }
+    
+    return (
+      <TouchableOpacity
+        testID={this.props.testID}
+        style={containerStyle}
+        onPress={this.onDayPress}
+        onLongPress={this.onDayLongPress}
+        disabled={marking.disableTouchEvent}
+        accessibilityRole={isDisabled ? undefined : 'button'}
+        accessibilityLabel={this.props.accessibilityLabel}
+      >
+        <Text allowFontScaling={false} style={textStyle}>{String(this.props.children)}</Text>
+        <View style={{flexDirection: 'row'}}>{dot}</View>
+      </TouchableOpacity>
+    );
+  }
+}
+
+export default Day;
diff --git a/node_modules/react-native-calendars/src/calendar/day/multi-dot/style.js b/node_modules/react-native-calendars/src/calendar/day/multi-dot/style.js
new file mode 100644
index 0000000..5a2ec36
--- /dev/null
+++ b/node_modules/react-native-calendars/src/calendar/day/multi-dot/style.js
@@ -0,0 +1,59 @@
+import {StyleSheet, Platform} from 'react-native';
+import * as defaultStyle from '../../../style';
+
+const STYLESHEET_ID = 'stylesheet.day.multiDot';
+
+export default function styleConstructor(theme={}) {
+  const appStyle = {...defaultStyle, ...theme};
+  return StyleSheet.create({
+    base: {
+      width: 32,
+      height: 32,
+      alignItems: 'center'
+    },
+    text: {
+      marginTop: 4,
+      fontSize: appStyle.textDayFontSize,
+      fontFamily: appStyle.textDayFontFamily,
+      fontWeight: appStyle.textDayFontWeight,
+      color: appStyle.dayTextColor,
+      backgroundColor: 'rgba(255, 255, 255, 0)'
+    },
+    alignedText: {
+      marginTop: Platform.OS === 'android' ? 4 : 6
+    },
+    selected: {
+      backgroundColor: appStyle.selectedDayBackgroundColor,
+      borderRadius: 0
+    },
+    today: {
+      backgroundColor: appStyle.todayBackgroundColor
+    },
+    todayText: {
+      color: appStyle.todayTextColor
+    },
+    selectedText: {
+      color: appStyle.selectedDayTextColor
+    },
+    disabledText: {
+      color: appStyle.textDisabledColor
+    },
+    dot: {
+      width: 4,
+      height: 4,
+      marginTop: 1,
+      marginLeft: 1,
+      marginRight: 1,
+      borderRadius: 2,
+      opacity: 0
+    },
+    visibleDot: {
+      opacity: 1,
+      backgroundColor: appStyle.dotColor
+    },
+    selectedDot: {
+      backgroundColor: appStyle.selectedDotColor
+    },
+    ...(theme[STYLESHEET_ID] || {})
+  });
+}
diff --git a/node_modules/react-native-calendars/src/calendar/day/multi-period/index.js b/node_modules/react-native-calendars/src/calendar/day/multi-period/index.js
new file mode 100644
index 0000000..76c86ae
--- /dev/null
+++ b/node_modules/react-native-calendars/src/calendar/day/multi-period/index.js
@@ -0,0 +1,119 @@
+import React, {Component} from 'react';
+import {TouchableOpacity, Text, View} from 'react-native';
+import PropTypes from 'prop-types';
+import {shouldUpdate} from '../../../component-updater';
+
+import styleConstructor from './style';
+
+
+class Day extends Component {
+  static displayName = 'IGNORE';
+  
+  static propTypes = {
+    // TODO: disabled props should be removed
+    state: PropTypes.oneOf(['disabled', 'today', '']),
+    // Specify theme properties to override specific styles for calendar parts. Default = {}
+    theme: PropTypes.object,
+    marking: PropTypes.any,
+    onPress: PropTypes.func,
+    onLongPress: PropTypes.func,
+    date: PropTypes.object
+  };
+
+  constructor(props) {
+    super(props);
+
+    this.style = styleConstructor(props.theme);
+
+    this.onDayPress = this.onDayPress.bind(this);
+    this.onDayLongPress = this.onDayLongPress.bind(this);
+  }
+
+  onDayPress() {
+    this.props.onPress(this.props.date);
+  }
+  onDayLongPress() {
+    this.props.onLongPress(this.props.date);
+  }
+
+  shouldComponentUpdate(nextProps) {
+    return shouldUpdate(this.props, nextProps, ['state', 'children', 'marking', 'onPress', 'onLongPress']);
+  }
+
+  renderPeriods(marking) {
+    const baseDotStyle = [this.style.dot, this.style.visibleDot];
+    if (
+      marking.periods &&
+      Array.isArray(marking.periods) &&
+      marking.periods.length > 0
+    ) {
+      // Filter out dots so that we we process only those items which have key and color property
+      const validPeriods = marking.periods.filter(d => d && d.color);
+      return validPeriods.map((period, index) => {
+        const style = [
+          ...baseDotStyle,
+          {
+            backgroundColor: period.color
+          }
+        ];
+        if (period.startingDay) {
+          style.push({
+            borderTopLeftRadius: 2,
+            borderBottomLeftRadius: 2,
+            marginLeft: 4
+          });
+        }
+        if (period.endingDay) {
+          style.push({
+            borderTopRightRadius: 2,
+            borderBottomRightRadius: 2,
+            marginRight: 4
+          });
+        }
+        return <View key={index} style={style}/>;
+      });
+    }
+    return;
+  }
+
+  render() {
+    const containerStyle = [this.style.base];
+    const textStyle = [this.style.text];
+    const marking = this.props.marking || {};
+    const periods = this.renderPeriods(marking);
+    const isDisabled = typeof marking.disabled !== 'undefined' ? marking.disabled : this.props.state === 'disabled';
+
+    if (marking.selected) {
+      containerStyle.push(this.style.selected);
+      textStyle.push(this.style.selectedText);
+    } else if (isDisabled) {
+      textStyle.push(this.style.disabledText);
+    } else if (this.props.state === 'today') {
+      containerStyle.push(this.style.today);
+      textStyle.push(this.style.todayText);
+    }
+    return (
+      <View style={{alignSelf: 'stretch'}}>
+        <TouchableOpacity 
+          testID={this.props.testID} 
+          style={containerStyle} 
+          onPress={this.onDayPress}
+          onLongPress={this.onDayLongPress}
+          disabled={marking.disableTouchEvent}
+          accessible
+          accessibilityRole={isDisabled ? undefined : 'button'}
+          accessibilityLabel={this.props.accessibilityLabel}
+        >
+          <Text allowFontScaling={false} style={textStyle}>
+            {String(this.props.children)}
+          </Text>
+        </TouchableOpacity>
+        <View style={{alignSelf: 'stretch'}}>
+          {periods}
+        </View>
+      </View>
+    );
+  }
+}
+
+export default Day;
diff --git a/node_modules/react-native-calendars/src/calendar/day/multi-period/style.js b/node_modules/react-native-calendars/src/calendar/day/multi-period/style.js
new file mode 100644
index 0000000..dafcd4a
--- /dev/null
+++ b/node_modules/react-native-calendars/src/calendar/day/multi-period/style.js
@@ -0,0 +1,80 @@
+import {StyleSheet, Platform} from 'react-native';
+import * as defaultStyle from '../../../style';
+
+
+const STYLESHEET_ID = 'stylesheet.day.basic';
+
+export default function styleConstructor(theme = {}) {
+  const appStyle = {...defaultStyle, ...theme};
+  return StyleSheet.create({
+    base: {
+      width: 32,
+      height: 32,
+      alignItems: 'center'
+    },
+    text: {
+      marginTop: Platform.OS === 'android' ? 4 : 6,
+      fontSize: appStyle.textDayFontSize,
+      fontFamily: appStyle.textDayFontFamily,
+      fontWeight: appStyle.textDayFontWeight,
+      color: appStyle.dayTextColor,
+      backgroundColor: 'rgba(255, 255, 255, 0)'
+    },
+    alignedText: {
+      marginTop: Platform.OS === 'android' ? 4 : 6
+    },
+    selected: {
+      backgroundColor: appStyle.selectedDayBackgroundColor,
+      borderRadius: 16
+    },
+    today: {
+      backgroundColor: appStyle.todayBackgroundColor
+    },
+    todayText: {
+      color: appStyle.todayTextColor
+    },
+    selectedText: {
+      color: appStyle.selectedDayTextColor
+    },
+    disabledText: {
+      color: appStyle.textDisabledColor
+    },
+    dot: {
+      // width: 42,
+      height: 4,
+      marginVertical: 1,
+      // borderRadius: 2,
+      opacity: 0
+    },
+    leftFiller: {
+      width: 4,
+      height: 4,
+      marginTop: 1,
+      marginRight: -2
+    },
+    rightFiller: {
+      width: 4,
+      height: 4,
+      marginTop: 1,
+      marginLeft: -2
+    },
+    rounded: {
+      borderRadius: 2
+    },
+    visibleDot: {
+      opacity: 1,
+      backgroundColor: appStyle.dotColor
+    },
+    selectedDot: {
+      backgroundColor: appStyle.selectedDotColor
+    },
+    startingPeriod: {
+      width: 18,
+      height: 4,
+      marginTop: 1,
+      borderRadius: 2,
+      opacity: 0
+    },
+    ...(theme[STYLESHEET_ID] || {})
+  });
+}
diff --git a/node_modules/react-native-calendars/src/calendar/day/period/index.js b/node_modules/react-native-calendars/src/calendar/day/period/index.js
index 7bd4945..b3b92e9 100644
--- a/node_modules/react-native-calendars/src/calendar/day/period/index.js
+++ b/node_modules/react-native-calendars/src/calendar/day/period/index.js
@@ -3,21 +3,24 @@ import PropTypes from 'prop-types';
 import React, {Component} from 'react';
 import {TouchableWithoutFeedback, Text, View} from 'react-native';
 import {shouldUpdate} from '../../../component-updater';
+import Dot from '../../dot';
 import * as defaultStyle from '../../../style';
 import styleConstructor from './style';
-import Dot from '../dot';
 
 
-export default class PeriodDay extends Component {
+class Day extends Component {
   static displayName = 'IGNORE';
 
   static propTypes = {
-    state: PropTypes.oneOf(['selected', 'disabled', 'today', '']), //TODO: deprecate
-    marking: PropTypes.any,
+    // TODO: selected + disabled props should be removed
+    state: PropTypes.oneOf(['selected', 'disabled', 'today', '']),
+    // Specify theme properties to override specific styles for calendar parts. Default = {}
     theme: PropTypes.object,
+    marking: PropTypes.any,
     onPress: PropTypes.func,
     onLongPress: PropTypes.func,
-    date: PropTypes.object
+    date: PropTypes.object,
+    markingExists: PropTypes.bool
   };
 
   constructor(props) {
@@ -27,42 +30,41 @@ export default class PeriodDay extends Component {
     this.style = styleConstructor(props.theme);
 
     this.markingStyle = this.getDrawingStyle(props.marking || []);
+    this.onDayPress = this.onDayPress.bind(this);
+    this.onDayLongPress = this.onDayLongPress.bind(this);
   }
 
-  onPress = () => {
+  onDayPress() {
     this.props.onPress(this.props.date);
   }
 
-  onLongPress = () => {
+  onDayLongPress() {
     this.props.onLongPress(this.props.date);
   }
 
   shouldComponentUpdate(nextProps) {
     const newMarkingStyle = this.getDrawingStyle(nextProps.marking);
+
     if (!_.isEqual(this.markingStyle, newMarkingStyle)) {
       this.markingStyle = newMarkingStyle;
       return true;
     }
 
-    return shouldUpdate(this.props, nextProps, ['children', 'state', 'marking', 'onPress', 'onLongPress', 'date']);
+    return shouldUpdate(this.props, nextProps, ['state', 'children', 'onPress', 'onLongPress']);
   }
 
   getDrawingStyle(marking) {
     const defaultStyle = {textStyle: {}, containerStyle: {}};
-    
     if (!marking) {
       return defaultStyle;
     }
-
     if (marking.disabled) {
-      defaultStyle.textStyle.color = this.style.disabledText.color;
+      defaultStyle.textStyle.color = this.theme.textDisabledColor;
     } else if (marking.selected) {
-      defaultStyle.textStyle.color = this.style.selectedText.color;
+      defaultStyle.textStyle.color = this.theme.selectedDayTextColor;
     }
-
     const resultStyle = ([marking]).reduce((prev, next) => {
-      
-      if (next.quickAction) { //???
+      if (next.quickAction) {
         if (next.first || next.last) {
           prev.containerStyle = this.style.firstQuickAction;
           prev.textStyle = this.style.firstQuickActionText;
@@ -81,19 +83,24 @@ export default class PeriodDay extends Component {
         return prev;
       }
 
-      if (next.status === 'NotAvailable') { //???
+      const color = next.color;
+      if (next.status === 'NotAvailable') {
         prev.textStyle = this.style.naText;
       }
-      
-      const color = next.color;
       if (next.startingDay) {
-        prev.startingDay = {color};
+        prev.startingDay = {
+          color
+        };
       }
       if (next.endingDay) {
-        prev.endingDay = {color};
+        prev.endingDay = {
+          color
+        };
       }
       if (!next.startingDay && !next.endingDay) {
-        prev.day = {color};
+        prev.day = {
+          color
+        };
       }
       if (next.textColor) {
         prev.textStyle.color = next.textColor;
@@ -110,7 +117,6 @@ export default class PeriodDay extends Component {
   }
 
   render() {
-    const {state, marking} = this.props;
     const containerStyle = [this.style.base];
     const textStyle = [this.style.text];
     let leftFillerStyle = {};
@@ -118,14 +124,14 @@ export default class PeriodDay extends Component {
     let fillerStyle = {};
     let fillers;
 
-    if (state === 'disabled') {
+    if (this.props.state === 'disabled') {
       textStyle.push(this.style.disabledText);
-    } else if (state === 'today') {
+    } else if (this.props.state === 'today') {
       containerStyle.push(this.style.today);
       textStyle.push(this.style.todayText);
     }
 
-    if (marking) {
+    if (this.props.marking) {
       containerStyle.push({
         borderRadius: 17
       });
@@ -167,6 +173,7 @@ export default class PeriodDay extends Component {
       } else if (flags.day) {
         leftFillerStyle = {backgroundColor: flags.day.color};
         rightFillerStyle = {backgroundColor: flags.day.color};
+        // #177 bug
         fillerStyle = {backgroundColor: flags.day.color};
       } else if (flags.endingDay && flags.startingDay) {
         rightFillerStyle = {
@@ -188,17 +195,17 @@ export default class PeriodDay extends Component {
       );
     }
 
-    const {marking: {marked, dotColor, disableTouchEvent}, theme, accessibilityLabel, testID} = this.props;
+    const {marking: {marked, dotColor}, theme} = this.props;
 
     return (
       <TouchableWithoutFeedback
-        testID={testID}
-        onPress={this.onPress}
-        onLongPress={this.onLongPress}
-        disabled={disableTouchEvent}
+        testID={this.props.testID}
+        onPress={this.onDayPress}
+        onLongPress={this.onDayLongPress}
+        disabled={this.props.marking.disableTouchEvent}
         accessible
-        accessibilityRole={disableTouchEvent ? undefined : 'button'}
-        accessibilityLabel={accessibilityLabel}
+        accessibilityRole={this.props.marking.disableTouchEvent ? undefined : 'button'}
+        accessibilityLabel={this.props.accessibilityLabel}
       >
         <View style={this.style.wrapper}>
           {fillers}
@@ -206,8 +213,8 @@ export default class PeriodDay extends Component {
             <Text allowFontScaling={false} style={textStyle}>{String(this.props.children)}</Text>
             <Dot
               theme={theme}
-              color={dotColor}
-              marked={marked}
+              isMarked={marked}
+              dotColor={dotColor}
             />
           </View>
         </View>
@@ -215,3 +222,5 @@ export default class PeriodDay extends Component {
     );
   }
 }
+
+export default Day;
diff --git a/node_modules/react-native-calendars/src/calendar/day/period/style.js b/node_modules/react-native-calendars/src/calendar/day/period/style.js
index d62a9b2..3a38159 100644
--- a/node_modules/react-native-calendars/src/calendar/day/period/style.js
+++ b/node_modules/react-native-calendars/src/calendar/day/period/style.js
@@ -14,11 +14,11 @@ export default function styleConstructor(theme={}) {
       marginLeft: -1
     },
     base: {
+      //borderWidth: 1,
       width: 38,
       height: FILLER_HEIGHT,
       alignItems: 'center'
     },
-
     fillers: {
       position: 'absolute',
       height: FILLER_HEIGHT,
@@ -34,7 +34,6 @@ export default function styleConstructor(theme={}) {
       height: FILLER_HEIGHT,
       flex: 1
     },
-
     text: {
       marginTop: 7,
       fontSize: appStyle.textDayFontSize,
@@ -49,14 +48,11 @@ export default function styleConstructor(theme={}) {
     todayText: {
       fontWeight: '500',
       color: theme.todayTextColor || appStyle.dayTextColor
-    },
-    selectedText: {
-      color: appStyle.selectedDayTextColor
+      //color: appStyle.textLinkColor
     },
     disabledText: {
       color: appStyle.textDisabledColor
     },
-    
     quickAction: {
       backgroundColor: 'white',
       borderWidth: 1,
diff --git a/node_modules/react-native-calendars/src/calendar/day/dot/index.js b/node_modules/react-native-calendars/src/calendar/dot/index.js
similarity index 52%
rename from node_modules/react-native-calendars/src/calendar/day/dot/index.js
rename to node_modules/react-native-calendars/src/calendar/dot/index.js
index 627db93..a456321 100644
--- a/node_modules/react-native-calendars/src/calendar/day/dot/index.js
+++ b/node_modules/react-native-calendars/src/calendar/dot/index.js
@@ -1,42 +1,45 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 import {View} from 'react-native';
 import styleConstructor from './style';
+import PropTypes from 'prop-types';
+
+const Dot = ({theme, isMarked, isDisabled, dotColor, isToday, isSelected}) => {
 
-const Dot = ({theme, marked, disabled, color, today, selected}) => {
   const style = styleConstructor(theme);
   const dotStyle = [style.dot];
 
-  if (marked) {
+  if (isMarked) {
     dotStyle.push(style.visibleDot);
 
-    if (today) {
+    if (isToday) {
       dotStyle.push(style.todayDot);
     }
 
-    if (disabled) {
+    if (isDisabled) {
       dotStyle.push(style.disabledDot);
     }
 
-    if (selected) {
+    if (isSelected) {
       dotStyle.push(style.selectedDot);
     }
 
-    if (color) {
-      dotStyle.push({backgroundColor: color});
+    if (dotColor) {
+      dotStyle.push({backgroundColor: dotColor});
     }
   }
 
-  return <View style={dotStyle}/>;
+  return (
+    <View style={dotStyle}/>
+  );
 };
 
 export default Dot;
 
 Dot.propTypes = {
   theme: PropTypes.object,
-  color: PropTypes.string,
-  marked: PropTypes.bool,
-  selected: PropTypes.bool,
-  disabled: PropTypes.bool,
-  today: PropTypes.bool
+  isMarked: PropTypes.bool,
+  dotColor: PropTypes.string,
+  isSelected: PropTypes.bool,
+  isToday: PropTypes.bool,
+  isDisabled: PropTypes.bool
 };
diff --git a/node_modules/react-native-calendars/src/calendar/day/dot/style.js b/node_modules/react-native-calendars/src/calendar/dot/style.js
similarity index 84%
rename from node_modules/react-native-calendars/src/calendar/day/dot/style.js
rename to node_modules/react-native-calendars/src/calendar/dot/style.js
index b9d833e..34ec3ec 100644
--- a/node_modules/react-native-calendars/src/calendar/day/dot/style.js
+++ b/node_modules/react-native-calendars/src/calendar/dot/style.js
@@ -1,16 +1,15 @@
 import {StyleSheet} from 'react-native';
-import * as defaultStyle from '../../../style';
+import * as defaultStyle from '../../style';
 
 const STYLESHEET_ID = 'stylesheet.dot';
 
-export default function styleConstructor(theme = {}) {
+export default function styleConstructor(theme={}) {
   const appStyle = {...defaultStyle, ...theme};
   return StyleSheet.create({
     dot: {
       width: 4,
       height: 4,
       marginTop: 1,
-      marginHorizontal: 1,
       borderRadius: 2,
       opacity: 0,
       ...appStyle.dotStyle
diff --git a/node_modules/react-native-calendars/src/calendar/header/index.js b/node_modules/react-native-calendars/src/calendar/header/index.js
index 912f318..4127e32 100644
--- a/node_modules/react-native-calendars/src/calendar/header/index.js
+++ b/node_modules/react-native-calendars/src/calendar/header/index.js
@@ -1,51 +1,34 @@
-import _ from 'lodash';
-import PropTypes from 'prop-types';
-import XDate from 'xdate';
 import React, {Component, Fragment} from 'react';
-import {ActivityIndicator, Platform, View, Text, TouchableOpacity, Image} from 'react-native';
-import {shouldUpdate} from '../../component-updater';
-import {weekDayNames} from '../../dateutils';
-import {
-  CHANGE_MONTH_LEFT_ARROW,
-  CHANGE_MONTH_RIGHT_ARROW,
-  HEADER_DAY_NAMES,
-  HEADER_LOADING_INDICATOR,
-  HEADER_MONTH_NAME
-} from '../../testIDs';
+import {ActivityIndicator, Platform} from 'react-native';
+import {View, Text, TouchableOpacity, Image} from 'react-native';
+import XDate from 'xdate';
+import PropTypes from 'prop-types';
 import styleConstructor from './style';
+import {weekDayNames} from '../../dateutils';
+import {CHANGE_MONTH_LEFT_ARROW, CHANGE_MONTH_RIGHT_ARROW, HEADER_MONTH_NAME} from '../../testIDs';
+import _ from 'lodash';
+
 
 class CalendarHeader extends Component {
   static displayName = 'IGNORE';
 
   static propTypes = {
     theme: PropTypes.object,
-    firstDay: PropTypes.number,
-    displayLoadingIndicator: PropTypes.bool,
-    showWeekNumbers: PropTypes.bool,
+    hideArrows: PropTypes.bool,
     month: PropTypes.instanceOf(XDate),
     addMonth: PropTypes.func,
-    /** Month format in the title. Formatting values: http://arshaw.com/xdate/#Formatting */
-    monthFormat: PropTypes.string,
-    /**  Hide day names. Default = false */
-    hideDayNames: PropTypes.bool,
-    /** Hide month navigation arrows. Default = false */
-    hideArrows: PropTypes.bool,
-    /** Replace default arrows with custom ones (direction can be 'left' or 'right') */
+    showIndicator: PropTypes.bool,
+    firstDay: PropTypes.number,
     renderArrow: PropTypes.func,
-    /** Handler which gets executed when press arrow icon left. It receive a callback can go back month */
+    hideDayNames: PropTypes.bool,
+    weekNumbers: PropTypes.bool,
     onPressArrowLeft: PropTypes.func,
-    /** Handler which gets executed when press arrow icon right. It receive a callback can go next month */
     onPressArrowRight: PropTypes.func,
-    /** Disable left arrow. Default = false */
     disableArrowLeft: PropTypes.bool,
-    /** Disable right arrow. Default = false */
     disableArrowRight: PropTypes.bool,
-    /** Apply custom disable color to selected day indexes */
+    webAriaLevel: PropTypes.number,
     disabledDaysIndexes: PropTypes.arrayOf(PropTypes.number),
-    /** Replace default month and year title with custom one. the function receive a date as parameter. */
-    renderHeader: PropTypes.any,
-    /** Provide aria-level for calendar heading for proper accessibility when used with web (react-native-web) */
-    webAriaLevel: PropTypes.number
+    renderHeader: PropTypes.any
   };
 
   static defaultProps = {
@@ -55,57 +38,68 @@ class CalendarHeader extends Component {
 
   constructor(props) {
     super(props);
-
     this.style = styleConstructor(props.theme);
   }
 
-  shouldComponentUpdate(nextProps) {
-    if (nextProps.month.toString('yyyy MM') !== this.props.month.toString('yyyy MM')) {
-      return true;
-    }
-    return shouldUpdate(this.props, nextProps, [
-      'displayLoadingIndicator',
-      'hideDayNames',
-      'firstDay',
-      'showWeekNumbers',
-      'monthFormat',
-      'renderArrow',
-      'disableArrowLeft',
-      'disableArrowRight'
-    ]);
-  }
-
   addMonth = () => {
     const {addMonth} = this.props;
     addMonth(1);
-  };
+  }
 
   subtractMonth = () => {
     const {addMonth} = this.props;
     addMonth(-1);
-  };
+  }
+
+  shouldComponentUpdate(nextProps) {
+    if (nextProps.month.toString('yyyy MM') !== this.props.month.toString('yyyy MM')) {
+      return true;
+    }
+    if (nextProps.showIndicator !== this.props.showIndicator) {
+      return true;
+    }
+    if (nextProps.hideDayNames !== this.props.hideDayNames) {
+      return true;
+    }
+    if (nextProps.firstDay !== this.props.firstDay) {
+      return true;
+    }
+    if (nextProps.weekNumbers !== this.props.weekNumbers) {
+      return true;
+    }
+    if (nextProps.monthFormat !== this.props.monthFormat) {
+      return true;
+    }
+    if (nextProps.renderArrow !== this.props.renderArrow) {
+      return true;
+    }
+    if (nextProps.disableArrowLeft !== this.props.disableArrowLeft) {
+      return true;
+    }
+    if (nextProps.disableArrowRight !== this.props.disableArrowRight) {
+      return true;
+    }
+    return false;
+  }
 
   onPressLeft = () => {
     const {onPressArrowLeft, month} = this.props;
-
     if (typeof onPressArrowLeft === 'function') {
       return onPressArrowLeft(this.subtractMonth, month);
     }
     return this.subtractMonth();
-  };
+  }
 
   onPressRight = () => {
     const {onPressArrowRight, month} = this.props;
-
     if (typeof onPressArrowRight === 'function') {
       return onPressArrowRight(this.addMonth, month);
     }
     return this.addMonth();
-  };
+  }
 
-  renderWeekDays = weekDaysNames => {
+  renderWeekDays = (weekDaysNames) => {
     const {disabledDaysIndexes} = this.props;
-
     return weekDaysNames.map((day, idx) => {
       const dayStyle = [this.style.dayHeader];
 
@@ -114,16 +108,22 @@ class CalendarHeader extends Component {
       }
 
       return (
-        <Text allowFontScaling={false} key={idx} style={dayStyle} numberOfLines={1} accessibilityLabel={''}>
+        <Text
+          allowFontScaling={false}
+          key={idx}
+          style={dayStyle}
+          numberOfLines={1}
+          accessibilityLabel={''}
+        >
           {day}
         </Text>
       );
     });
-  };
+  }
 
   renderHeader = () => {
-    const {renderHeader, month, monthFormat, testID, webAriaLevel} = this.props;
-    const webProps = Platform.OS === 'web' ? {'aria-level': webAriaLevel} : {};
+    const {renderHeader, month, monthFormat, testID} = this.props;
+    const webProps = Platform.OS === 'web' ? {'aria-level': this.props.webAriaLevel} : {};
 
     if (renderHeader) {
       return renderHeader(month);
@@ -134,7 +134,7 @@ class CalendarHeader extends Component {
         <Text
           allowFontScaling={false}
           style={this.style.monthText}
-          testID={testID ? `${HEADER_MONTH_NAME}-${testID}` : HEADER_MONTH_NAME}
+          testID={testID ? `${HEADER_MONTH_NAME}-${testID}`: HEADER_MONTH_NAME}
           {...webProps}
         >
           {month.toString(monthFormat)}
@@ -143,70 +143,56 @@ class CalendarHeader extends Component {
     );
   };
 
-  renderArrow(direction) {
-    const {hideArrows, disableArrowLeft, disableArrowRight, renderArrow, testID} = this.props;
-    if (hideArrows) {
-      return <View />;
-    }
-    const isLeft = direction === 'left';
-    const id = isLeft ? CHANGE_MONTH_LEFT_ARROW : CHANGE_MONTH_RIGHT_ARROW;
-    const testId = testID ? `${id}-${testID}` : id;
-    const onPress = isLeft ? this.onPressLeft : this.onPressRight;
-    const imageSource = isLeft ? require('../img/previous.png') : require('../img/next.png');
-    const renderArrowDirection = isLeft ? 'left' : 'right';
-    const shouldDisable = isLeft ? disableArrowLeft : disableArrowRight;
-
-    return (
-      <TouchableOpacity
-        onPress={!shouldDisable ? onPress : undefined}
-        disabled={shouldDisable}
-        style={this.style.arrow}
-        hitSlop={{left: 20, right: 20, top: 20, bottom: 20}}
-        testID={testId}
-      >
-        {renderArrow ? (
-          renderArrow(renderArrowDirection)
-        ) : (
-          <Image source={imageSource} style={shouldDisable ? this.style.disabledArrowImage : this.style.arrowImage} />
-        )}
-      </TouchableOpacity>
-    );
-  }
-
-  renderIndicator() {
-    const {displayLoadingIndicator, theme, testID} = this.props;
-
-    if (displayLoadingIndicator) {
-      return (
-        <ActivityIndicator
-          color={theme && theme.indicatorColor}
-          testID={testID ? `${HEADER_LOADING_INDICATOR}-${testID}` : HEADER_LOADING_INDICATOR}
-        />
+  render() {
+    let leftArrow = <View/>;
+    let rightArrow = <View/>;
+    let weekDaysNames = weekDayNames(this.props.firstDay);
+    const {testID} = this.props;
+
+    if (!this.props.hideArrows) {
+      leftArrow = (
+        <TouchableOpacity
+          onPress={this.onPressLeft}
+          disabled={this.props.disableArrowLeft}
+          style={this.style.arrow}
+          hitSlop={{left: 20, right: 20, top: 20, bottom: 20}}
+          testID={testID ? `${CHANGE_MONTH_LEFT_ARROW}-${testID}`: CHANGE_MONTH_LEFT_ARROW}
+        >
+          {this.props.renderArrow
+            ? this.props.renderArrow('left')
+            : <Image
+              source={require('../img/previous.png')}
+              style={this.props.disableArrowLeft ? this.style.disabledArrowImage : this.style.arrowImage}
+            />}
+        </TouchableOpacity>
       );
-    }
-  }
-
-  renderDayNames() {
-    const {firstDay, hideDayNames, showWeekNumbers, testID} = this.props;
-    const weekDaysNames = weekDayNames(firstDay);
-
-    if (!hideDayNames) {
-      return (
-        <View style={this.style.week} testID={testID ? `${HEADER_DAY_NAMES}-${testID}` : HEADER_DAY_NAMES}>
-          {showWeekNumbers && <Text allowFontScaling={false} style={this.style.dayHeader}></Text>}
-          {this.renderWeekDays(weekDaysNames)}
-        </View>
+      rightArrow = (
+        <TouchableOpacity
+          onPress={this.onPressRight}
+          disabled={this.props.disableArrowRight}
+          style={this.style.arrow}
+          hitSlop={{left: 20, right: 20, top: 20, bottom: 20}}
+          testID={testID ? `${CHANGE_MONTH_RIGHT_ARROW}-${testID}`: CHANGE_MONTH_RIGHT_ARROW}
+        >
+          {this.props.renderArrow
+            ? this.props.renderArrow('right')
+            : <Image
+              source={require('../img/next.png')}
+              style={this.props.disableArrowRight ? this.style.disabledArrowImage : this.style.arrowImage}
+            />}
+        </TouchableOpacity>
       );
     }
-  }
 
-  render() {
-    const {style, testID} = this.props;
+    let indicator;
+    if (this.props.showIndicator) {
+      indicator = <ActivityIndicator color={this.props.theme && this.props.theme.indicatorColor}/>;
+    }
 
     return (
       <View
         testID={testID}
-        style={style}
+        style={this.props.style}
         accessible
         accessibilityRole={'adjustable'}
         accessibilityActions={[
@@ -217,31 +203,50 @@ class CalendarHeader extends Component {
         accessibilityElementsHidden={this.props.accessibilityElementsHidden} // iOS
         importantForAccessibility={this.props.importantForAccessibility} // Android
       >
+        <Text style ={this.style.textLight}>에일루와 함께한{console.log("에일루!")}</Text>
         <View style={this.style.header}>
-          {this.renderArrow('left')}
+          {leftArrow}
           <View style={this.style.headerContainer}>
             {this.renderHeader()}
-            {this.renderIndicator()}
+            {indicator}
           </View>
-          {this.renderArrow('right')}
+          {rightArrow}
+        </View>
+        <View style = {{flexDirection : 'row', marginTop : 10}}>
+          <Text style = {this.style.dateText}>일</Text>
+          <Text style = {this.style.dateText}>월</Text>
+          <Text style = {this.style.dateText}>화</Text>
+          <Text style = {this.style.dateText}>수</Text>
+          <Text style = {this.style.dateText}>목</Text>
+          <Text style = {this.style.dateText}>금</Text>
+          <Text style = {this.style.dateText}>토</Text>
         </View>
-        {this.renderDayNames()}
+        <View style={this.style.thickLine}></View>
+
+        {!this.props.hideDayNames &&
+          <View style={this.style.week}>
+            {this.props.weekNumbers &&
+              <Text allowFontScaling={false} style={this.style.dayHeader}></Text>
+            }
+            {this.renderWeekDays(weekDaysNames)}
+          </View>
+        }
       </View>
     );
   }
 
   onAccessibilityAction = event => {
     switch (event.nativeEvent.actionName) {
-      case 'decrement':
-        this.onPressLeft();
-        break;
-      case 'increment':
-        this.onPressRight();
-        break;
-      default:
-        break;
+    case 'decrement':
+      this.onPressLeft();
+      break;
+    case 'increment':
+      this.onPressRight();
+      break;
+    default:
+      break;
     }
-  };
+  }
 }
 
 export default CalendarHeader;
diff --git a/node_modules/react-native-calendars/src/calendar/header/style.js b/node_modules/react-native-calendars/src/calendar/header/style.js
index d32f90c..39e806c 100644
--- a/node_modules/react-native-calendars/src/calendar/header/style.js
+++ b/node_modules/react-native-calendars/src/calendar/header/style.js
@@ -3,7 +3,7 @@ import * as defaultStyle from '../../style';
 
 const STYLESHEET_ID = 'stylesheet.calendar.header';
 
-export default function (theme = {}) {
+export default function(theme={}) {
   const appStyle = {...defaultStyle, ...theme};
   return StyleSheet.create({
     header: {
@@ -14,6 +14,29 @@ export default function (theme = {}) {
       marginTop: 6,
       alignItems: 'center'
     },
+    //added by eunji
+    thickLine :{
+      borderBottomColor: '#5235BB',
+      borderBottomWidth: 2,
+      marginTop : 20,
+      marginBottom : 10,
+      marginLeft : 3,
+      marginRight : 3,
+    },
+    dateText : {
+      fontFamily : 'NanumSquareB',
+      fontSize : 13,
+      color : '#4E4B66',
+      flex : 1,
+      textAlign : 'center'
+    },
+    textLight:{
+      fontFamily : 'NanumSquareR',
+      fontSize : 15,
+      color:'#14142A',
+      textAlign: 'center' 
+      
+    },
     headerContainer: {
       flexDirection: 'row'
     },
@@ -35,7 +58,7 @@ export default function (theme = {}) {
           width: appStyle.arrowWidth,
           height: appStyle.arrowHeight
         }
-      })
+      }),
     },
     disabledArrowImage: {
       tintColor: appStyle.disabledArrowColor
diff --git a/node_modules/react-native-calendars/src/calendar/index.js b/node_modules/react-native-calendars/src/calendar/index.js
index e0aa749..27e2307 100644
--- a/node_modules/react-native-calendars/src/calendar/index.js
+++ b/node_modules/react-native-calendars/src/calendar/index.js
@@ -1,23 +1,27 @@
-import _ from 'lodash';
-import PropTypes from 'prop-types';
-import XDate from 'xdate';
 import React, {Component} from 'react';
 import * as ReactNative from 'react-native';
-import GestureRecognizer, {swipeDirections} from 'react-native-swipe-gestures';
+import PropTypes from 'prop-types';
+import XDate from 'xdate';
+
 import dateutils from '../dateutils';
 import {xdateToData, parseDate} from '../interface';
-import shouldComponentUpdate from './updater';
-import {extractComponentProps} from '../component-updater';
-import {WEEK_NUMBER} from '../testIDs';
 import styleConstructor from './style';
+import Day from './day/basic';
+import UnitDay from './day/period';
+import MultiDotDay from './day/multi-dot';
+import MultiPeriodDay from './day/multi-period';
+import SingleDay from './day/custom';
 import CalendarHeader from './header';
-import BasicDay from './day/basic';
-import Day from './day/index';
+import shouldComponentUpdate from './updater';
+import GestureRecognizer, {swipeDirections} from 'react-native-swipe-gestures';
+import {SELECT_DATE_SLOT} from '../testIDs';
 
 //Fallback for react-native-web or when RN version is < 0.44
 const {View, ViewPropTypes} = ReactNative;
 const viewPropTypes =
-  typeof document !== 'undefined' ? PropTypes.shape({style: PropTypes.object}) : ViewPropTypes || View.propTypes;
+  typeof document !== 'undefined'
+    ? PropTypes.shape({style: PropTypes.object})
+    : ViewPropTypes || View.propTypes;
 const EmptyArray = [];
 
 /**
@@ -29,10 +33,10 @@ class Calendar extends Component {
   static displayName = 'Calendar';
 
   static propTypes = {
-    ...CalendarHeader.propTypes,
-    ...Day.propTypes,
     /** Specify theme properties to override specific styles for calendar parts. Default = {} */
     theme: PropTypes.object,
+    /** Collection of dates that have to be marked. Default = {} */
+    markedDates: PropTypes.object,
     /** Specify style for calendar container element. Default = {} */
     style: viewPropTypes.style,
     /** Initially visible month. Default = Date() */
@@ -43,15 +47,15 @@ class Calendar extends Component {
     maxDate: PropTypes.any,
     /** If firstDay=1 week starts from Monday. Note that dayNames and dayNamesShort should still start from Sunday. */
     firstDay: PropTypes.number,
-    /** Collection of dates that have to be marked. Default = {} */
-    markedDates: PropTypes.object,
+    /** Date marking style [simple/period/multi-dot/multi-period]. Default = 'simple' */
+    markingType: PropTypes.string,
+    /** Hide month navigation arrows. Default = false */
+    hideArrows: PropTypes.bool,
     /** Display loading indicator. Default = false */
     displayLoadingIndicator: PropTypes.bool,
-    /** Show week numbers. Default = false */
-    showWeekNumbers: PropTypes.bool,
     /** Do not show days of other months in month page. Default = false */
     hideExtraDays: PropTypes.bool,
-    /** Always show six weeks on each month (only when hideExtraDays = false). Default = false */
+    /** Always show six weeks on each month. Default = false */
     showSixWeeks: PropTypes.bool,
     /** Handler which gets executed on day press. Default = undefined */
     onDayPress: PropTypes.func,
@@ -61,16 +65,42 @@ class Calendar extends Component {
     onMonthChange: PropTypes.func,
     /** Handler which gets executed when visible month changes in calendar. Default = undefined */
     onVisibleMonthsChange: PropTypes.func,
+    /** Replace default arrows with custom ones (direction can be 'left' or 'right') */
+    renderArrow: PropTypes.func,
+    /** Provide custom day rendering component */
+    dayComponent: PropTypes.any,
+    /** Month format in calendar title. Formatting values: http://arshaw.com/xdate/#Formatting */
+    monthFormat: PropTypes.string,
     /** Disables changing month when click on days of other months (when hideExtraDays is false). Default = false */
     disableMonthChange: PropTypes.bool,
-    /** Enable the option to swipe between months. Default: false */
-    enableSwipeMonths: PropTypes.bool,
+    /**  Hide day names. Default = false */
+    hideDayNames: PropTypes.bool,
     /** Disable days by default. Default = false */
     disabledByDefault: PropTypes.bool,
+    /** Show week numbers. Default = false */
+    showWeekNumbers: PropTypes.bool,
+    /** Handler which gets executed when press arrow icon left. It receive a callback can go back month */
+    onPressArrowLeft: PropTypes.func,
+    /** Handler which gets executed when press arrow icon right. It receive a callback can go next month */
+    onPressArrowRight: PropTypes.func,
+    /** Disable left arrow. Default = false */
+    disableArrowLeft: PropTypes.bool,
+    /** Disable right arrow. Default = false */
+    disableArrowRight: PropTypes.bool,
     /** Style passed to the header */
     headerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),
+    /** Provide aria-level for calendar heading for proper accessibility when used with web (react-native-web) */
+    webAriaLevel: PropTypes.number,
+    /** Apply custom disable color to selected day indexes */
+    disabledDaysIndexes: PropTypes.arrayOf(PropTypes.number),
+    /** Disable all touch events for disabled days. can be override with disableTouchEvent in markedDates*/
+    disableAllTouchEventsForDisabledDays: PropTypes.bool,
+    /** Replace default month and year title with custom one. the function receive a date as parameter. */
+    renderHeader: PropTypes.any,
     /** Allow rendering of a totally custom header */
-    customHeader: PropTypes.any
+    customHeader: PropTypes.any,
+    /** Enable the option to swipe between months. Default: false */
+    enableSwipeMonths: PropTypes.bool
   };
 
   static defaultProps = {
@@ -80,47 +110,42 @@ class Calendar extends Component {
   constructor(props) {
     super(props);
 
-    this.style = styleConstructor(props.theme);
-
+    this.style = styleConstructor(this.props.theme);
     this.state = {
       currentMonth: props.current ? parseDate(props.current) : XDate()
     };
 
+    this.updateMonth = this.updateMonth.bind(this);
+    this.pressDay = this.pressDay.bind(this);
+    this.longPressDay = this.longPressDay.bind(this);
     this.shouldComponentUpdate = shouldComponentUpdate;
   }
 
-  addMonth = count => {
-    this.updateMonth(this.state.currentMonth.clone().addMonths(count, true));
-  };
-
-  updateMonth = (day, doNotTriggerListeners) => {
+  updateMonth(day, doNotTriggerListeners) {
     if (day.toString('yyyy MM') === this.state.currentMonth.toString('yyyy MM')) {
       return;
     }
-
-    this.setState(
-      {
-        currentMonth: day.clone()
-      },
-      () => {
-        if (!doNotTriggerListeners) {
-          const currMont = this.state.currentMonth.clone();
-          _.invoke(this.props, 'onMonthChange', xdateToData(currMont));
-          _.invoke(this.props, 'onVisibleMonthsChange', [xdateToData(currMont)]);
+    this.setState({
+      currentMonth: day.clone()
+    }, () => {
+      if (!doNotTriggerListeners) {
+        const currMont = this.state.currentMonth.clone();
+        if (this.props.onMonthChange) {
+          this.props.onMonthChange(xdateToData(currMont));
+        }
+        if (this.props.onVisibleMonthsChange) {
+          this.props.onVisibleMonthsChange([xdateToData(currMont)]);
         }
       }
-    );
-  };
+    });
+  }
 
   _handleDayInteraction(date, interaction) {
-    const {disableMonthChange} = this.props;
     const day = parseDate(date);
     const minDate = parseDate(this.props.minDate);
     const maxDate = parseDate(this.props.maxDate);
-
     if (!(minDate && !dateutils.isGTE(day, minDate)) && !(maxDate && !dateutils.isLTE(day, maxDate))) {
-      const shouldUpdateMonth = disableMonthChange === undefined || !disableMonthChange;
-
+      const shouldUpdateMonth = this.props.disableMonthChange === undefined || !this.props.disableMonthChange;
       if (shouldUpdateMonth) {
         this.updateMonth(day);
       }
@@ -130,113 +155,180 @@ class Calendar extends Component {
     }
   }
 
-  pressDay = date => {
+  pressDay(date) {
     this._handleDayInteraction(date, this.props.onDayPress);
-  };
+  }
 
-  longPressDay = date => {
+  longPressDay(date) {
     this._handleDayInteraction(date, this.props.onDayLongPress);
-  };
+  }
 
-  getDateMarking(day) {
-    const {markedDates} = this.props;
+  addMonth = (count) => {
+    this.updateMonth(this.state.currentMonth.clone().addMonths(count, true));
+  }
 
-    if (!markedDates) {
-      return false;
-    }
+  isDateNotInTheRange = (minDate, maxDate, date) => {
+    return (minDate && !dateutils.isGTE(date, minDate)) || (maxDate && !dateutils.isLTE(date, maxDate));
+  }
 
-    const dates = markedDates[day.toString('yyyy-MM-dd')] || EmptyArray;
+  getAccessibilityLabel = (state, day) => {
+    const today = XDate.locales[XDate.defaultLocale].today;
+    const formatAccessibilityLabel = XDate.locales[XDate.defaultLocale].formatAccessibilityLabel;
+    const isToday = state === 'today';
+    const markingLabel = this.getDateMarking(day);
 
-    if (dates.length || dates) {
-      return dates;
-    } else {
-      return false;
+    if (formatAccessibilityLabel) {
+      return `${isToday ? today : ''} ${day.toString(formatAccessibilityLabel)} ${markingLabel}`;
     }
+
+    return `${isToday ? 'today' : ''} ${day.toString('dddd d MMMM yyyy')} ${markingLabel}`;
   }
 
-  getState(day) {
-    const {disabledByDefault} = this.props;
+
+  renderDay(day, id) {
     const minDate = parseDate(this.props.minDate);
     const maxDate = parseDate(this.props.maxDate);
     let state = '';
-
-    if (disabledByDefault) {
+    if (this.props.disabledByDefault) {
       state = 'disabled';
-    } else if (dateutils.isDateNotInTheRange(minDate, maxDate, day)) {
+    } else if (this.isDateNotInTheRange(minDate, maxDate, day)) {
       state = 'disabled';
     } else if (!dateutils.sameMonth(day, this.state.currentMonth)) {
       state = 'disabled';
     } else if (dateutils.sameDate(day, XDate())) {
       state = 'today';
     }
-    return state;
+
+    if (!dateutils.sameMonth(day, this.state.currentMonth) && this.props.hideExtraDays) {
+      return (<View key={id} style={{flex: 1}}/>);
+    }
+
+    const DayComp = this.getDayComponent();
+    const date = day.getDate();
+    const dateAsObject = xdateToData(day);
+    const accessibilityLabel = this.getAccessibilityLabel(state, day);
+
+    return (
+      <View style={{flex: 1, alignItems: 'center'}} key={id}>
+        <DayComp
+          testID={`${SELECT_DATE_SLOT}-${dateAsObject.dateString}`}
+          state={state}
+          theme={this.props.theme}
+          onPress={this.pressDay}
+          onLongPress={this.longPressDay}
+          date={dateAsObject}
+          marking={this.getDateMarking(day)}
+          accessibilityLabel={accessibilityLabel}
+          disableAllTouchEventsForDisabledDays={this.props.disableAllTouchEventsForDisabledDays}
+        >
+          {date}
+        </DayComp>
+      </View>
+    );
   }
 
-  onSwipe = gestureName => {
+  getMarkingLabel(day) {
+    let label = '';
+    const marking = this.getDateMarking(day);
+
+    if (marking.accessibilityLabel) {
+      return marking.accessibilityLabel;
+    }
+
+    if (marking.selected) {
+      label += 'selected ';
+      if (!marking.marked) {
+        label += 'You have no entries for this day ';
+      }
+    }
+    if (marking.marked) {
+      label += 'You have entries for this day ';
+    }
+    if (marking.startingDay) {
+      label += 'period start ';
+    }
+    if (marking.endingDay) {
+      label += 'period end ';
+    }
+    if (marking.disabled || marking.disableTouchEvent) {
+      label += 'disabled ';
+    }
+    return label;
+  }
+
+  getDayComponent() {
+    if (this.props.dayComponent) {
+      return this.props.dayComponent;
+    }
+
+    switch (this.props.markingType) {
+    case 'period':
+      return UnitDay;
+    case 'multi-dot':
+      return MultiDotDay;
+    case 'multi-period':
+      return MultiPeriodDay;
+    case 'custom':
+      return SingleDay;
+    default:
+      return Day;
+    }
+  }
+
+  getDateMarking(day) {
+    if (!this.props.markedDates) {
+      return false;
+    }
+
+    const dates = this.props.markedDates[day.toString('yyyy-MM-dd')] || EmptyArray;
+    if (dates.length || dates) {
+      return dates;
+    } else {
+      return false;
+    }
+  }
+
+  onSwipe = (gestureName) => {
     const {SWIPE_UP, SWIPE_DOWN, SWIPE_LEFT, SWIPE_RIGHT} = swipeDirections;
 
     switch (gestureName) {
-      case SWIPE_UP:
-      case SWIPE_DOWN:
-        break;
-      case SWIPE_LEFT:
-        this.onSwipeLeft();
-        break;
-      case SWIPE_RIGHT:
-        this.onSwipeRight();
-        break;
+    case SWIPE_UP:
+    case SWIPE_DOWN:
+      break;
+    case SWIPE_LEFT:
+      this.onSwipeLeft();
+      break;
+    case SWIPE_RIGHT:
+      this.onSwipeRight();
+      break;
     }
-  };
+  }
 
   onSwipeLeft = () => {
     this.header.onPressRight();
-  };
+  }
 
   onSwipeRight = () => {
     this.header.onPressLeft();
-  };
+  }
 
   renderWeekNumber(weekNumber) {
     return (
-      <View style={this.style.dayContainer} key={`week-container-${weekNumber}`}>
-        <BasicDay
+      <View style={{flex: 1, alignItems: 'center'}} key={`week-container-${weekNumber}`}>
+        <Day
           key={`week-${weekNumber}`}
-          marking={{disableTouchEvent: true}}
-          state="disabled"
           theme={this.props.theme}
-          testID={`${WEEK_NUMBER}-${weekNumber}`}
+          marking={{disableTouchEvent: true}}
+          state='disabled'
         >
           {weekNumber}
-        </BasicDay>
-      </View>
-    );
-  }
-
-  renderDay(day, id) {
-    const {hideExtraDays} = this.props;
-    const dayProps = extractComponentProps(Day, this.props);
-
-    if (!dateutils.sameMonth(day, this.state.currentMonth) && hideExtraDays) {
-      return <View key={id} style={this.style.emptyDayContainer} />;
-    }
-
-    return (
-      <View style={this.style.dayContainer} key={id}>
-        <Day
-          {...dayProps}
-          day={day}
-          state={this.getState(day)}
-          marking={this.getDateMarking(day)}
-          onPress={this.pressDay}
-          onLongPress={this.longPressDay}
-        />
+        </Day>
       </View>
     );
   }
 
   renderWeek(days, id) {
     const week = [];
-
     days.forEach((day, id2) => {
       week.push(this.renderDay(day, id2));
     }, this);
@@ -245,71 +337,70 @@ class Calendar extends Component {
       week.unshift(this.renderWeekNumber(days[days.length - 1].getWeek()));
     }
 
-    return (
-      <View style={this.style.week} key={id}>
-        {week}
-      </View>
-    );
+    return (<View style={this.style.week} key={id}>{week}</View>);
   }
 
-  renderMonth() {
+  render() {
     const {currentMonth} = this.state;
-    const {firstDay, showSixWeeks, hideExtraDays} = this.props;
+    const {firstDay, showSixWeeks, hideExtraDays, enableSwipeMonths} = this.props;
     const shouldShowSixWeeks = showSixWeeks && !hideExtraDays;
     const days = dateutils.page(currentMonth, firstDay, shouldShowSixWeeks);
-    const weeks = [];
 
+    const weeks = [];
     while (days.length) {
       weeks.push(this.renderWeek(days.splice(0, 7), weeks.length));
     }
 
-    return <View style={this.style.monthView}>{weeks}</View>;
-  }
-
-  renderHeader() {
-    const {customHeader, headerStyle, displayLoadingIndicator, markedDates, testID} = this.props;
-    const current = parseDate(this.props.current);
     let indicator;
-
+    const current = parseDate(this.props.current);
     if (current) {
       const lastMonthOfDay = current.clone().addMonths(1, true).setDate(1).addDays(-1).toString('yyyy-MM-dd');
-      if (displayLoadingIndicator && !(markedDates && markedDates[lastMonthOfDay])) {
+      if (this.props.displayLoadingIndicator &&
+        !(this.props.markedDates && this.props.markedDates[lastMonthOfDay])) {
         indicator = true;
       }
     }
 
-    const headerProps = extractComponentProps(CalendarHeader, this.props);
+    const GestureComponent = enableSwipeMonths ? GestureRecognizer : View;
+    const gestureProps = enableSwipeMonths ? {onSwipe: (direction, state) => this.onSwipe(direction, state)} : {};
 
-    const props = {
-      ...headerProps,
-      testID: testID,
-      style: headerStyle,
-      ref: c => (this.header = c),
+    const headerProps = {
+      testID: this.props.testID,
+      ref: c => this.header = c,
+      style: this.props.headerStyle,
+      theme: this.props.theme,
+      hideArrows: this.props.hideArrows,
       month: this.state.currentMonth,
       addMonth: this.addMonth,
-      displayLoadingIndicator: indicator
+      showIndicator: indicator,
+      firstDay: this.props.firstDay,
+      showSixWeeks: this.props.showSixWeeks,
+      renderArrow: this.props.renderArrow,
+      monthFormat: this.props.monthFormat,
+      hideDayNames: this.props.hideDayNames,
+      weekNumbers: this.props.showWeekNumbers,
+      onPressArrowLeft: this.props.onPressArrowLeft,
+      onPressArrowRight: this.props.onPressArrowRight,
+      webAriaLevel: this.props.webAriaLevel,
+      disableArrowLeft: this.props.disableArrowLeft,
+      disableArrowRight: this.props.disableArrowRight,
+      disabledDaysIndexes: this.props.disabledDaysIndexes,
+      renderHeader: this.props.renderHeader
     };
-
-    const CustomHeader = customHeader;
-    const HeaderComponent = customHeader ? CustomHeader : CalendarHeader;
-
-    return <HeaderComponent {...props} />;
-  }
-
-  render() {
-    const {enableSwipeMonths, style} = this.props;
-    const GestureComponent = enableSwipeMonths ? GestureRecognizer : View;
-    const gestureProps = enableSwipeMonths ? {onSwipe: (direction, state) => this.onSwipe(direction, state)} : {};
-
+    const CustomHeader = this.props.customHeader;
     return (
       <GestureComponent {...gestureProps}>
         <View
-          style={[this.style.container, style]}
+          style={[this.style.container, this.props.style]}
           accessibilityElementsHidden={this.props.accessibilityElementsHidden} // iOS
           importantForAccessibility={this.props.importantForAccessibility} // Android
         >
-          {this.renderHeader()}
-          {this.renderMonth()}
+          { CustomHeader
+            ? <CustomHeader {...headerProps}/>
+            : <CalendarHeader {...headerProps}/>
+          }
+          <View style={this.style.monthView}>{weeks}</View>
+          <View style={this.style.thickLine}></View>
         </View>
       </GestureComponent>
     );
diff --git a/node_modules/react-native-calendars/src/calendar/style.js b/node_modules/react-native-calendars/src/calendar/style.js
index 7423af0..7bde2bf 100644
--- a/node_modules/react-native-calendars/src/calendar/style.js
+++ b/node_modules/react-native-calendars/src/calendar/style.js
@@ -3,30 +3,32 @@ import * as defaultStyle from '../style';
 
 const STYLESHEET_ID = 'stylesheet.calendar.main';
 
-export default function getStyle(theme = {}) {
+export default function getStyle(theme={}) {
   const appStyle = {...defaultStyle, ...theme};
   return StyleSheet.create({
     container: {
-      paddingLeft: 5,
-      paddingRight: 5,
+      marginLeft :0,
+      marginRight :0,
       backgroundColor: appStyle.calendarBackground
     },
-    dayContainer: {
-      flex: 1,
-      alignItems: 'center'
-    },
-    emptyDayContainer: {
-      flex: 1
-    },
     monthView: {
       backgroundColor: appStyle.calendarBackground
+      //borderColor: '#5235BB',
+      //borderWidth: 1
+    },
+    thickLine :{
+      borderBottomColor: '#5235BB',
+      borderBottomWidth: 2,
+      marginTop : 0,
+      marginBottom : 10,
+     
     },
     week: {
-      marginTop: 7,
-      marginBottom: 7,
+      marginBottom: 10,
       flexDirection: 'row',
-      justifyContent: 'space-around'
+      justifyContent: 'space-around',
     },
     ...(theme[STYLESHEET_ID] || {})
   });
 }
+
diff --git a/node_modules/react-native-calendars/src/calendar/updater.js b/node_modules/react-native-calendars/src/calendar/updater.js
index eab3f87..7b2c8fc 100644
--- a/node_modules/react-native-calendars/src/calendar/updater.js
+++ b/node_modules/react-native-calendars/src/calendar/updater.js
@@ -12,7 +12,7 @@ export default function shouldComponentUpdate(nextProps, nextState) {
     return prev;
   }, {update: false});
 
-  shouldUpdate = ['markedDates', 'hideExtraDays', 'displayLoadingIndicator', 'disableArrowLeft', 'disableArrowRight'].reduce((prev, next) => {
+  shouldUpdate = ['markedDates', 'hideExtraDays', 'displayLoadingIndicator'].reduce((prev, next) => {
     if (!prev.update && nextProps[next] !== this.props[next]) {
       return {
         update: true,
diff --git a/node_modules/react-native-calendars/src/component-updater.js b/node_modules/react-native-calendars/src/component-updater.js
index dc91627..19402f0 100644
--- a/node_modules/react-native-calendars/src/component-updater.js
+++ b/node_modules/react-native-calendars/src/component-updater.js
@@ -10,20 +10,6 @@ function shouldUpdate(a, b, paths) {
   return false;
 }
 
-function extractComponentProps(component, props, ignoreProps) {
-  const componentPropTypes = component.propTypes;
-  if (componentPropTypes) {
-    const keys = Object.keys(componentPropTypes);
-    const componentProps = _.chain(props)
-      .pickBy((_value, key) => _.includes(keys, key))
-      .omit(ignoreProps)
-      .value();
-    return componentProps;
-  }
-  return {};
-}
-
 module.exports = {
-  shouldUpdate,
-  extractComponentProps
+  shouldUpdate
 };
diff --git a/node_modules/react-native-calendars/src/dateutils.js b/node_modules/react-native-calendars/src/dateutils.js
index c7ed2e7..da5e115 100644
--- a/node_modules/react-native-calendars/src/dateutils.js
+++ b/node_modules/react-native-calendars/src/dateutils.js
@@ -88,11 +88,6 @@ function page(xd, firstDayOfWeek, showSixWeeks) {
   return before.concat(days.slice(1, days.length - 1), after);
 }
 
-function isDateNotInTheRange(minDate, maxDate, date) {
-  return (minDate && !isGTE(date, minDate)) || (maxDate && !isLTE(date, maxDate));
-}
-
-
 module.exports = {
   weekDayNames,
   sameMonth,
@@ -101,6 +96,5 @@ module.exports = {
   page,
   fromTo,
   isLTE,
-  isGTE,
-  isDateNotInTheRange
+  isGTE
 };
diff --git a/node_modules/react-native-calendars/src/expandableCalendar/agendaList.js b/node_modules/react-native-calendars/src/expandableCalendar/agendaList.js
index 20482c6..db88e27 100644
--- a/node_modules/react-native-calendars/src/expandableCalendar/agendaList.js
+++ b/node_modules/react-native-calendars/src/expandableCalendar/agendaList.js
@@ -13,8 +13,8 @@ const UPDATE_SOURCES = commons.UPDATE_SOURCES;
 
 /**
  * @description: AgendaList component
- * @note: Should be wrapped with 'CalendarProvider'
  * @extends: SectionList
+ * @notes: Should be wrapped in CalendarProvider component
  * @example: https://github.com/wix/react-native-calendars/blob/master/example/src/screens/expandableCalendar.js
  */
 class AgendaList extends Component {
@@ -134,10 +134,6 @@ class AgendaList extends Component {
   }
 
   renderSectionHeader = ({section: {title}}) => {
-    if (this.props.renderSectionHeader) {
-      return this.props.renderSectionHeader();
-    }
-
     let sectionTitle = title;
 
     if (this.props.dayFormat) {
diff --git a/node_modules/react-native-calendars/src/expandableCalendar/index.js b/node_modules/react-native-calendars/src/expandableCalendar/index.js
index 98f46c6..c7c7c10 100644
--- a/node_modules/react-native-calendars/src/expandableCalendar/index.js
+++ b/node_modules/react-native-calendars/src/expandableCalendar/index.js
@@ -1,6 +1,13 @@
 import _ from 'lodash';
 import React, {Component} from 'react';
-import {AccessibilityInfo, PanResponder, Animated, View, Text, Image} from 'react-native';
+import {
+  AccessibilityInfo,
+  PanResponder,
+  Animated,
+  View,
+  Text,
+  Image
+} from 'react-native';
 import PropTypes from 'prop-types';
 import XDate from 'xdate';
 import {CALENDAR_KNOB} from '../testIDs';
@@ -30,7 +37,6 @@ const DAY_NAMES_PADDING = 24;
 
 /**
  * @description: Expandable calendar component
- * @note: Should be wrapped with 'CalendarProvider'
  * @extends: CalendarList
  * @extendslink: docs/CalendarList
  * @example: https://github.com/wix/react-native-calendars/blob/master/example/src/screens/expandableCalendar.js
@@ -42,8 +48,6 @@ class ExpandableCalendar extends Component {
     ...CalendarList.propTypes,
     /** the initial position of the calendar ('open' or 'closed') */
     initialPosition: PropTypes.oneOf(_.values(POSITIONS)),
-    /** callback that fires when the calendar is opened or closed */
-    onCalendarToggled: PropTypes.func,
     /** an option to disable the pan gesture and disable the opening and closing of the calendar (initialPosition will persist)*/
     disablePan: PropTypes.bool,
     /** whether to hide the knob  */
@@ -56,7 +60,7 @@ class ExpandableCalendar extends Component {
     allowShadow: PropTypes.bool,
     /** whether to disable the week scroll in closed position */
     disableWeekScroll: PropTypes.bool
-  };
+  }
 
   static defaultProps = {
     horizontal: true,
@@ -65,7 +69,7 @@ class ExpandableCalendar extends Component {
     leftArrowImageSource: require('../calendar/img/previous.png'),
     rightArrowImageSource: require('../calendar/img/next.png'),
     allowShadow: true
-  };
+  }
 
   static positions = POSITIONS;
 
@@ -132,7 +136,7 @@ class ExpandableCalendar extends Component {
     }
   }
 
-  handleScreenReaderStatus = screenReaderEnabled => {
+  handleScreenReaderStatus = (screenReaderEnabled) => {
     this.setState({screenReaderEnabled});
   };
 
@@ -151,8 +155,7 @@ class ExpandableCalendar extends Component {
     if (this.calendar) {
       if (!this.props.horizontal) {
         this.calendar.scrollToDay(XDate(date), 0, true);
-      } else if (this.getMonth(date) !== this.visibleMonth) {
-        // don't scroll if the month is already visible
+      } else if (this.getMonth(date) !== this.visibleMonth) { // don't scroll if the month is already visible
         this.calendar.scrollToMonth(XDate(date));
       }
     }
@@ -183,7 +186,7 @@ class ExpandableCalendar extends Component {
     if (!this.props.horizontal) {
       return Math.max(commons.screenHeight, commons.screenWidth);
     }
-    return CLOSED_HEIGHT + WEEK_HEIGHT * (this.numberOfWeeks - 1) + (this.props.hideKnob ? 12 : KNOB_CONTAINER_HEIGHT);
+    return CLOSED_HEIGHT + (WEEK_HEIGHT * (this.numberOfWeeks - 1)) + (this.props.hideKnob ? 12 : KNOB_CONTAINER_HEIGHT);
   }
 
   getDateString(date) {
@@ -256,7 +259,9 @@ class ExpandableCalendar extends Component {
     }
     return gestureState.dy > 5 || gestureState.dy < -5;
   };
-  handlePanResponderGrant = () => {};
+  handlePanResponderGrant = () => {
+
+  };
   handlePanResponderMove = (e, gestureState) => {
     // limit min height to closed height
     this._wrapperStyles.style.height = Math.max(this.closedHeight, this._height + gestureState.dy);
@@ -299,8 +304,6 @@ class ExpandableCalendar extends Component {
         useNativeDriver: false
       }).start(this.onAnimatedFinished);
 
-      _.invoke(this.props, 'onCalendarToggled', isOpen);
-
       this.setPosition();
       this.closeHeader(isOpen);
       this.resetWeekCalendarOpacity(isOpen);
@@ -311,7 +314,7 @@ class ExpandableCalendar extends Component {
     if (finished) {
       // this.setPosition();
     }
-  };
+  }
 
   setPosition() {
     const isClosed = this._height === this.closedHeight;
@@ -342,25 +345,22 @@ class ExpandableCalendar extends Component {
 
   onPressArrowLeft = () => {
     this.scrollPage(false);
-  };
-
+  }
   onPressArrowRight = () => {
     this.scrollPage(true);
-  };
+  }
 
-  onDayPress = value => {
-    // {year: 2019, month: 4, day: 22, timestamp: 1555977600000, dateString: "2019-04-23"}
+  onDayPress = (value) => { // {year: 2019, month: 4, day: 22, timestamp: 1555977600000, dateString: "2019-04-23"}
     _.invoke(this.props.context, 'setDate', value.dateString, UPDATE_SOURCES.DAY_PRESS);
 
-    setTimeout(() => {
-      // to allows setDate to be completed
+    setTimeout(() => { // to allows setDate to be completed
       if (this.state.position === POSITIONS.OPEN) {
         this.bounceToPosition(this.closedHeight);
       }
     }, 0);
-  };
+  }
 
-  onVisibleMonthsChange = value => {
+  onVisibleMonthsChange = (value) => {
     if (this.visibleMonth !== _.first(value).month) {
       this.visibleMonth = _.first(value).month; // equivalent to this.getMonth(value[0].dateString)
 
@@ -373,8 +373,7 @@ class ExpandableCalendar extends Component {
       }
 
       // updating openHeight
-      setTimeout(() => {
-        // to wait for setDate() call in horizontal scroll (this.scrollPage())
+      setTimeout(() => { // to wait for setDate() call in horizontal scroll (this.scrollPage())
         const numberOfWeeks = this.getNumberOfWeeksInMonth(parseDate(this.props.context.date));
         if (numberOfWeeks !== this.numberOfWeeks) {
           this.numberOfWeeks = numberOfWeeks;
@@ -385,7 +384,7 @@ class ExpandableCalendar extends Component {
         }
       }, 0);
     }
-  };
+  }
 
   /** Renders */
 
@@ -403,9 +402,7 @@ class ExpandableCalendar extends Component {
         ]}
       >
         {weekDaysNames.map((day, index) => (
-          <Text allowFontScaling={false} key={day + index} style={this.style.weekday} numberOfLines={1}>
-            {day}
-          </Text>
+          <Text allowFontScaling={false} key={day+index} style={this.style.weekday} numberOfLines={1}>{day}</Text>
         ))}
       </View>
     );
@@ -416,13 +413,11 @@ class ExpandableCalendar extends Component {
 
     return (
       <Animated.View
-        ref={e => (this.header = e)}
+        ref={e => this.header = e}
         style={[this.style.header, {height: HEADER_HEIGHT, top: this.state.headerDeltaY}]}
         pointerEvents={'none'}
       >
-        <Text allowFontScaling={false} style={this.style.headerTitle}>
-          {monthYear}
-        </Text>
+        <Text allowFontScaling={false} style={this.style.headerTitle}>{monthYear}</Text>
         {this.renderWeekDaysNames()}
       </Animated.View>
     );
@@ -435,7 +430,7 @@ class ExpandableCalendar extends Component {
 
     return (
       <Animated.View
-        ref={e => (this.weekCalendar = e)}
+        ref={e => this.weekCalendar = e}
         style={{
           position: 'absolute',
           left: 0,
@@ -464,12 +459,12 @@ class ExpandableCalendar extends Component {
     // TODO: turn to TouchableOpacity with onPress that closes it
     return (
       <View style={this.style.knobContainer} pointerEvents={'none'} testID={`${this.props.testID}-knob`}>
-        <View style={this.style.knob} testID={CALENDAR_KNOB} />
+        <View style={this.style.knob} testID={CALENDAR_KNOB}/>
       </View>
     );
   }
 
-  renderArrow = direction => {
+  renderArrow = (direction) => {
     if (_.isFunction(this.props.renderArrow)) {
       return this.props.renderArrow(direction);
     }
@@ -481,7 +476,7 @@ class ExpandableCalendar extends Component {
         testID={`${this.props.testID}-${direction}-arrow`}
       />
     );
-  };
+  }
 
   render() {
     const {style, hideKnob, horizontal, allowShadow, theme, ...others} = this.props;
@@ -491,7 +486,7 @@ class ExpandableCalendar extends Component {
 
     return (
       <View testID={this.props.testID} style={[allowShadow && this.style.containerShadow, style]}>
-        {screenReaderEnabled ? (
+        {screenReaderEnabled ?
           <Calendar
             testID="calendar"
             {...others}
@@ -501,11 +496,9 @@ class ExpandableCalendar extends Component {
             hideExtraDays
             renderArrow={this.renderArrow}
           />
-        ) : (
+          :
           <Animated.View
-            ref={e => {
-              this.wrapper = e;
-            }}
+            ref={e => {this.wrapper = e;}}
             style={{height: deltaY}}
             {...this.panResponder.panHandlers}
           >
@@ -514,7 +507,7 @@ class ExpandableCalendar extends Component {
               horizontal={horizontal}
               {...others}
               theme={themeObject}
-              ref={r => (this.calendar = r)}
+              ref={r => this.calendar = r}
               current={this.initialDate}
               onDayPress={this.onDayPress}
               onVisibleMonthsChange={this.onVisibleMonthsChange}
@@ -532,7 +525,7 @@ class ExpandableCalendar extends Component {
             {!hideKnob && this.renderKnob()}
             {!horizontal && this.renderHeader()}
           </Animated.View>
-        )}
+        }
       </View>
     );
   }
diff --git a/node_modules/react-native-calendars/src/expandableCalendar/style.js b/node_modules/react-native-calendars/src/expandableCalendar/style.js
index 1991ed6..a226953 100644
--- a/node_modules/react-native-calendars/src/expandableCalendar/style.js
+++ b/node_modules/react-native-calendars/src/expandableCalendar/style.js
@@ -94,13 +94,6 @@ export default function styleConstructor(theme = {}) {
       flexDirection: 'row',
       justifyContent: 'space-around'
     },
-    dayContainer: {
-      flex: 1, 
-      alignItems: 'center'
-    },
-    emptyDayContainer: {
-      flex: 1
-    },
     dayHeader: {
       width: 32,
       textAlign: 'center',
diff --git a/node_modules/react-native-calendars/src/expandableCalendar/week.js b/node_modules/react-native-calendars/src/expandableCalendar/week.js
index 2a38121..a7362da 100644
--- a/node_modules/react-native-calendars/src/expandableCalendar/week.js
+++ b/node_modules/react-native-calendars/src/expandableCalendar/week.js
@@ -1,14 +1,19 @@
-import PropTypes from 'prop-types';
-import XDate from 'xdate';
 import React, {Component} from 'react';
 import {View} from 'react-native';
+import PropTypes from 'prop-types';
+import XDate from 'xdate';
+
 import dateutils from '../dateutils';
-import {parseDate} from '../interface';
-import {extractComponentProps} from '../component-updater';
+import {xdateToData, parseDate} from '../interface';
+import {SELECT_DATE_SLOT} from '../testIDs';
 import styleConstructor from './style';
+
+import Day from '../calendar/day/basic';
+import UnitDay from '../calendar/day/period';
+import MultiDotDay from '../calendar/day/multi-dot';
+import MultiPeriodDay from '../calendar/day/multi-period';
+import SingleDay from '../calendar/day/custom';
 import Calendar from '../calendar';
-import Day from '../calendar/day/index';
-// import BasicDay from '../calendar/day/basic';
 
 
 const EmptyArray = [];
@@ -18,7 +23,7 @@ class Week extends Component {
 
   static propTypes = {
     ...Calendar.propTypes,
-    /** the current date */
+    // the current date
     current: PropTypes.any
   };
 
@@ -52,11 +57,30 @@ class Week extends Component {
         daysArray.push(newDate);
         index += 1;
       }
-
       return daysArray;
     }
   }
 
+  getDayComponent() {
+    const {dayComponent} = this.props;
+    if (dayComponent) {
+      return dayComponent;
+    }
+
+    switch (this.props.markingType) {
+    case 'period':
+      return UnitDay;
+    case 'multi-dot':
+      return MultiDotDay;
+    case 'multi-period':
+      return MultiPeriodDay;
+    case 'custom':
+      return SingleDay;
+    default:
+      return Day;
+    }
+  }
+
   getDateMarking(day) {
     const {markedDates} = this.props;
     if (!markedDates) {
@@ -71,49 +95,51 @@ class Week extends Component {
     }
   }
 
-  getState(day) {
-    const {current, disabledByDefault} = this.props;
+  // renderWeekNumber (weekNumber) {
+  //   return <Day key={`week-${weekNumber}`} theme={this.props.theme} marking={{disableTouchEvent: true}} state='disabled'>{weekNumber}</Day>;
+  // }
+
+  renderDay(day, id) {
+    const {current, disableAllTouchEventsForDisabledDays} = this.props;
     const minDate = parseDate(this.props.minDate);
     const maxDate = parseDate(this.props.maxDate);
-    let state = '';
 
-    if (disabledByDefault) {
+    let state = '';
+    if (this.props.disabledByDefault) {
       state = 'disabled';
-    } else if (dateutils.isDateNotInTheRange(minDate, maxDate, day)) {
+    } else if ((minDate && !dateutils.isGTE(day, minDate)) || (maxDate && !dateutils.isLTE(day, maxDate))) {
       state = 'disabled';
-    } else if (!dateutils.sameMonth(day, parseDate(current))) {
+    } else if (!dateutils.sameMonth(day, parseDate(current))) { // for extra days
       state = 'disabled';
     } else if (dateutils.sameDate(day, XDate())) {
       state = 'today';
     }
-    return state;
-  }
-
-  // renderWeekNumber (weekNumber) {
-  //   return <BasicDay key={`week-${weekNumber}`} theme={this.props.theme} marking={{disableTouchEvent: true}} state='disabled'>{weekNumber}</Day>;
-  // }
-  
-  renderDay(day, id) {
-    const {current, hideExtraDays} = this.props;
-    const dayProps = extractComponentProps(Day, this.props);
 
     // hide extra days
-    if (current && hideExtraDays) {
+    if (current && this.props.hideExtraDays) {
       if (!dateutils.sameMonth(day, parseDate(current))) {
-        return (<View key={id} style={this.style.emptyDayContainer}/>);
+        return (<View key={id} style={{flex: 1}}/>);
       }
     }
 
+    const DayComp = this.getDayComponent();
+    const dayDate = day.getDate();
+    const dateAsObject = xdateToData(day);
+
     return (
-      <View style={this.style.dayContainer} key={id}>
-        <Day
-          {...dayProps}
-          day={day}
-          state={this.getState(day)}
-          marking={this.getDateMarking(day)}
+      <View style={{flex: 1, alignItems: 'center'}} key={id}>
+        <DayComp
+          testID={`${SELECT_DATE_SLOT}-${dateAsObject.dateString}`}
+          state={state}
+          theme={this.props.theme}
           onPress={this.props.onDayPress}
           onLongPress={this.props.onDayPress}
-        />
+          date={dateAsObject}
+          marking={this.getDateMarking(day)}
+          disableAllTouchEventsForDisabledDays={disableAllTouchEventsForDisabledDays}
+        >
+          {dayDate}
+        </DayComp>
       </View>
     );
   }
diff --git a/node_modules/react-native-calendars/src/expandableCalendar/weekCalendar.js b/node_modules/react-native-calendars/src/expandableCalendar/weekCalendar.js
index 80340c2..e94477c 100644
--- a/node_modules/react-native-calendars/src/expandableCalendar/weekCalendar.js
+++ b/node_modules/react-native-calendars/src/expandableCalendar/weekCalendar.js
@@ -18,7 +18,6 @@ const NUMBER_OF_PAGES = 2; // must be a positive number
 
 /**
  * @description: Week calendar component
- * @note: Should be wrapped with 'CalendarProvider'
  * @example: https://github.com/wix/react-native-calendars/blob/master/example/src/screens/expandableCalendar.js
  */
 class WeekCalendar extends Component {
@@ -26,7 +25,7 @@ class WeekCalendar extends Component {
 
   static propTypes = {
     ...CalendarList.propTypes,
-    /** the current date */
+    // the current date
     current: PropTypes.any,
     /** whether to have shadow/elevation for the calendar */
     allowShadow: PropTypes.bool,
diff --git a/node_modules/react-native-calendars/src/style.js b/node_modules/react-native-calendars/src/style.js
index a1db8eb..0bd5de6 100644
--- a/node_modules/react-native-calendars/src/style.js
+++ b/node_modules/react-native-calendars/src/style.js
@@ -1,4 +1,4 @@
-export const foregroundColor = 'white';
+export const foregroundColor = '#F7F7FC';//default wa white
 export const backgroundColor = '#f2F4f5'; // Agenda's reservations bg color
 
 export const separatorColor = '#f2F4f5'; // not in use
diff --git a/node_modules/react-native-calendars/src/testIDs.js b/node_modules/react-native-calendars/src/testIDs.js
index 8403bfb..2c69aa9 100644
--- a/node_modules/react-native-calendars/src/testIDs.js
+++ b/node_modules/react-native-calendars/src/testIDs.js
@@ -8,8 +8,5 @@ module.exports = {
   STATIC_HEADER: 'STATIC_HEADER',
   AGENDA_CALENDAR_KNOB: `${PREFIX}.AGENDA_CALENDAR_KNOB`,
   HEADER_MONTH_NAME: 'HEADER_MONTH_NAME',
-  RESERVATION_DATE: `${PREFIX}.RESERVATION_DATE`,
-  HEADER_DAY_NAMES: `${PREFIX}.DAY_NAMES`,
-  WEEK_NUMBER: `${PREFIX}.WEEK_NUMBER`,
-  HEADER_LOADING_INDICATOR: `${PREFIX}.HEADER_LOADING_INDICATOR`
+  RESERVATION_DATE: `${PREFIX}.RESERVATION_DATE`
 };
diff --git a/node_modules/react-native-calendars/src/timeline/Packer.js b/node_modules/react-native-calendars/src/timeline/Packer.js
index 08fb791..7143b32 100644
--- a/node_modules/react-native-calendars/src/timeline/Packer.js
+++ b/node_modules/react-native-calendars/src/timeline/Packer.js
@@ -1,12 +1,16 @@
 // @flow
 import moment from 'moment';
-
 const offset = 100;
 
 function buildEvent(column, left, width, dayStart) {
   const startTime = moment(column.start);
-  const endTime = column.end ? moment(column.end) : startTime.clone().add(1, 'hour');
-  const dayStartTime = startTime.clone().hour(dayStart).minute(0);
+  const endTime = column.end
+    ? moment(column.end)
+    : startTime.clone().add(1, 'hour');
+  const dayStartTime = startTime
+    .clone()
+    .hour(dayStart)
+    .minute(0);
   const diffHours = startTime.diff(dayStartTime, 'hours', true);
 
   column.top = diffHours * offset;
@@ -59,7 +63,7 @@ function populateEvents(events, screenWidth, dayStart) {
 
   events = events
     .map((ev, index) => ({...ev, index: index}))
-    .sort(function (a, b) {
+    .sort(function(a, b) {
       if (a.start < b.start) return -1;
       if (a.start > b.start) return 1;
       if (a.end < b.end) return -1;
@@ -70,7 +74,7 @@ function populateEvents(events, screenWidth, dayStart) {
   columns = [];
   lastEnd = null;
 
-  events.forEach(function (ev) {
+  events.forEach(function(ev) {
     if (lastEnd !== null && ev.start >= lastEnd) {
       pack(columns, screenWidth, calculatedEvents, dayStart);
       columns = [];
diff --git a/node_modules/react-native-calendars/src/timeline/Timeline.js b/node_modules/react-native-calendars/src/timeline/Timeline.js
index acc0c06..43dbe7f 100644
--- a/node_modules/react-native-calendars/src/timeline/Timeline.js
+++ b/node_modules/react-native-calendars/src/timeline/Timeline.js
@@ -1,11 +1,17 @@
 // @flow
-import _ from 'lodash';
+import {
+  View,
+  Text,
+  ScrollView,
+  TouchableOpacity,
+  Dimensions
+} from 'react-native';
 import PropTypes from 'prop-types';
-import moment from 'moment';
+import populateEvents from './Packer';
 import React from 'react';
-import {View, Text, ScrollView, TouchableOpacity, Dimensions} from 'react-native';
+import moment from 'moment';
+import _ from 'lodash';
 import styleConstructor from './style';
-import populateEvents from './Packer';
 
 const LEFT_MARGIN = 60 - 1;
 const TEXT_LINE_HEIGHT = 17;
@@ -22,37 +28,32 @@ export default class Timeline extends React.PureComponent {
     end: PropTypes.number,
     eventTapped: PropTypes.func,
     format24h: PropTypes.bool,
-    events: PropTypes.arrayOf(
-      PropTypes.shape({
-        start: PropTypes.string.isRequired,
-        end: PropTypes.string.isRequired,
-        title: PropTypes.string.isRequired,
-        summary: PropTypes.string.isRequired,
-        color: PropTypes.string
-      })
-    ).isRequired
-  };
+    events: PropTypes.arrayOf(PropTypes.shape({
+      start: PropTypes.string.isRequired,
+      end: PropTypes.string.isRequired,
+      title: PropTypes.string.isRequired,
+      summary: PropTypes.string.isRequired,
+      color: PropTypes.string
+    })).isRequired
+  }
 
   static defaultProps = {
     start: 0,
     end: 24,
     events: [],
     format24h: true
-  };
+  }
 
   constructor(props) {
     super(props);
-
     const {start, end} = this.props;
     this.calendarHeight = (end - start) * 100;
-
-    this.style = styleConstructor(props.styles, this.calendarHeight);
-
+    this.styles = styleConstructor(props.styles, this.calendarHeight);
     const width = dimensionWidth - LEFT_MARGIN;
     const packedEvents = populateEvents(props.events, width, start);
-    let initPosition = _.min(_.map(packedEvents, 'top')) - this.calendarHeight / (end - start);
+    let initPosition =
+      _.min(_.map(packedEvents, 'top')) - this.calendarHeight / (end - start);
     const verifiedInitPosition = initPosition < 0 ? 0 : initPosition;
-
     this.state = {
       _scrollY: verifiedInitPosition,
       packedEvents
@@ -63,8 +64,7 @@ export default class Timeline extends React.PureComponent {
     const width = dimensionWidth - LEFT_MARGIN;
     const {events: prevEvents, start: prevStart = 0} = prevProps;
     const {events, start = 0} = this.props;
-
-    if (prevEvents !== events || prevStart !== start) {
+    if(prevEvents !== events || prevStart !== start) {
       this.setState({
         packedEvents: populateEvents(events, width, start)
       });
@@ -90,11 +90,11 @@ export default class Timeline extends React.PureComponent {
   _renderLines() {
     const {format24h, start = 0, end = 24} = this.props;
     const offset = this.calendarHeight / (end - start);
+
     const EVENT_DIFF = 20;
 
     return range(start, end + 1).map((i, index) => {
       let timeText;
-      
       if (i === start) {
         timeText = '';
       } else if (i < 12) {
@@ -106,24 +106,34 @@ export default class Timeline extends React.PureComponent {
       } else {
         timeText = !format24h ? `${i - 12} PM` : `${i}:00`;
       }
-
       return [
-        <Text key={`timeLabel${i}`} style={[this.style.timeLabel, {top: offset * index - 6}]}>
+        <Text
+          key={`timeLabel${i}`}
+          style={[this.styles.timeLabel, {top: offset * index - 6}]}>
           {timeText}
         </Text>,
         i === start ? null : (
-          <View key={`line${i}`} style={[this.style.line, {top: offset * index, width: dimensionWidth - EVENT_DIFF}]} />
+          <View
+            key={`line${i}`}
+            style={[
+              this.styles.line,
+              {top: offset * index, width: dimensionWidth - EVENT_DIFF}
+            ]}
+          />
         ),
         <View
           key={`lineHalf${i}`}
-          style={[this.style.line, {top: offset * (index + 0.5), width: dimensionWidth - EVENT_DIFF}]}
+          style={[
+            this.styles.line,
+            {top: offset * (index + 0.5), width: dimensionWidth - EVENT_DIFF}
+          ]}
         />
       ];
     });
   }
 
   _onEventTapped(event) {
-    if (this.props.eventTapped) {
+    if(this.props.eventTapped) {
       this.props.eventTapped(event);
     }
   }
@@ -143,29 +153,30 @@ export default class Timeline extends React.PureComponent {
       // However it would make sense to overflow the title to a new line if needed
       const numberOfLines = Math.floor(event.height / TEXT_LINE_HEIGHT);
       const formatTime = this.props.format24h ? 'HH:mm' : 'hh:mm A';
-      
       return (
         <TouchableOpacity
           activeOpacity={0.9}
           onPress={() => this._onEventTapped(this.props.events[event.index])}
           key={i}
-          style={[this.style.event, style]}
-        >
+          style={[this.styles.event, style]}>
           {this.props.renderEvent ? (
             this.props.renderEvent(event)
           ) : (
             <View>
-              <Text numberOfLines={1} style={this.style.eventTitle}>
+              <Text numberOfLines={1} style={this.styles.eventTitle}>
                 {event.title || 'Event'}
               </Text>
               {numberOfLines > 1 ? (
-                <Text numberOfLines={numberOfLines - 1} style={[this.style.eventSummary]}>
+                <Text
+                  numberOfLines={numberOfLines - 1}
+                  style={[this.styles.eventSummary]}>
                   {event.summary || ' '}
                 </Text>
               ) : null}
               {numberOfLines > 2 ? (
-                <Text style={this.style.eventTimes} numberOfLines={1}>
-                  {moment(event.start).format(formatTime)} - {moment(event.end).format(formatTime)}
+                <Text style={this.styles.eventTimes} numberOfLines={1}>
+                  {moment(event.start).format(formatTime)} -{' '}
+                  {moment(event.end).format(formatTime)}
                 </Text>
               ) : null}
             </View>
@@ -185,8 +196,10 @@ export default class Timeline extends React.PureComponent {
     return (
       <ScrollView
         ref={ref => (this._scrollView = ref)}
-        contentContainerStyle={[this.style.contentStyle, {width: dimensionWidth}]}
-      >
+        contentContainerStyle={[
+          this.styles.contentStyle,
+          {width: dimensionWidth}
+        ]}>
         {this._renderLines()}
         {this._renderEvents()}
       </ScrollView>
